<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录一次Mongdb动态切换库查询</title>
    <url>/2020/12/01/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mongdb%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="记录一次Mongdb动态切换库查询"><a href="#记录一次Mongdb动态切换库查询" class="headerlink" title="记录一次Mongdb动态切换库查询"></a>记录一次Mongdb动态切换库查询</h1><p>最近因为mongdb从单库改成随日期递增的多库，所以现在需要将原本单个数据源改为根据每天日期动态读库。</p>
<p>原版本是采用MongodbTemplate读取properties配置文件中mongo相关配置，网上找了不下20篇博文，却没有一篇有清晰解释的。</p>
<p>业务：ip超过三次发送邮件</p>
<p>mongo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原聚合查询是这样的 </span></span><br><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span><br><span class="line"><span class="comment">// where匹配查询条件：affid, offerid,sourceid。</span></span><br><span class="line">Aggregation.match(</span><br><span class="line">    Criteria.where(<span class="string">&quot;aff_id&quot;</span>).is(affId.toString())</span><br><span class="line">            .and(<span class="string">&quot;offer_id&quot;</span>).is(offerId.toString())</span><br><span class="line">            .and(<span class="string">&quot;source_id&quot;</span>).is(originSourceId)),</span><br><span class="line"><span class="comment">// 通过ip进行分组，查询超过3条记录的ip</span></span><br><span class="line">Aggregation.group(<span class="string">&quot;ip&quot;</span>).count().as(<span class="string">&quot;ipCount&quot;</span>), Aggregation.match(Criteria.where(<span class="string">&quot;ipCount&quot;</span>).gt(<span class="number">3</span>)));</span><br><span class="line">AggregationResults&lt;Map&gt; ans = mongoTemplate.aggregate(aggregation, collectionName, Map.class);</span><br></pre></td></tr></table></figure>

<p>使用原生API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接mongo</span></span><br><span class="line">MongoClient mongoClient = MongoClients.create(<span class="string">&quot;mongodb://localhost:27017&quot;</span>);</span><br><span class="line">String dateBaseName = prefix_database + DateUtils.formatDate(DateUtils.yyyyMMdd);</span><br><span class="line"><span class="comment">// 获取集合</span></span><br><span class="line">MongoCollection&lt;Document&gt; doc = database.getCollection(collectionName);</span><br><span class="line"><span class="comment">// match mongo筛选条件,匹配对应source_id, aff_id, offer_id的记录</span></span><br><span class="line">Document subMatch = <span class="keyword">new</span> Document();</span><br><span class="line">subMatch.put(<span class="string">&quot;offer_id&quot;</span>, offerId.toString());</span><br><span class="line">subMatch.put(<span class="string">&quot;aff_id&quot;</span>, affId.toString());</span><br><span class="line">subMatch.put(<span class="string">&quot;source_id&quot;</span>, originSourceId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// group 根据ip进行分组</span></span><br><span class="line">Document subGroup = <span class="keyword">new</span> Document();</span><br><span class="line">subGroup.put(<span class="string">&quot;_id&quot;</span>, <span class="string">&quot;$ip&quot;</span>); </span><br><span class="line"><span class="comment">// 这里必须_id ：强制必须存在。可以为 null。</span></span><br><span class="line"><span class="comment">// 其余的计算字段是可选的，并使用&lt;accumulator&gt;运算符计算。具体的使用，通过下面的代码说明：</span></span><br><span class="line">subGroup.put(<span class="string">&quot;ipCount&quot;</span>, <span class="keyword">new</span> Document(<span class="string">&quot;$sum&quot;</span>, <span class="number">1</span>));</span><br><span class="line">Document match = <span class="keyword">new</span> Document(<span class="string">&quot;$match&quot;</span>, subMatch);</span><br><span class="line">Document group = <span class="keyword">new</span> Document(<span class="string">&quot;$group&quot;</span>, subGroup);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对分组后结果筛选超过3次的IP</span></span><br><span class="line">Document matchGroup = <span class="keyword">new</span> Document(<span class="string">&quot;$match&quot;</span>, <span class="keyword">new</span> Document(<span class="string">&quot;ipCount&quot;</span>,<span class="keyword">new</span> Document(<span class="string">&quot;$gt&quot;</span>, <span class="number">3</span>)));</span><br><span class="line">List&lt;Document&gt; aggregateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">aggregateList.add(match);</span><br><span class="line">aggregateList.add(group);</span><br><span class="line">aggregateList.add(matchGroup);</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line">AggregateIterable&lt;Document&gt; resultSet = doc.aggregate(aggregateList);</span><br><span class="line"><span class="comment">// 遍历结果</span></span><br><span class="line">Iterator&lt;Document&gt; iterator = resultSet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">      Document map = iterator.next();</span><br><span class="line">      String ip = (String) map.get(<span class="string">&quot;_id&quot;</span>);</span><br><span class="line">      ips.add(ip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Console:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印结果</span><br><span class="line">[107.150.126.148]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>千万级数据表优化</title>
    <url>/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="千万级数据表优化"><a href="#千万级数据表优化" class="headerlink" title="千万级数据表优化"></a>千万级数据表优化</h1><p>最近因为工作量不大，向老大讨了一个活—优化SeverLog。公司项目的ServerLog查询功能太慢（数据量千万级别），这对一个毫无Sql实战经验的人来说有点难以着手，不知道从何处入手。</p>
<h3 id="1-找到执行Sql"><a href="#1-找到执行Sql" class="headerlink" title="1.找到执行Sql"></a>1.找到执行Sql</h3><p>sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line"> sld.offer_id <span class="keyword">AS</span> offerId,</span><br><span class="line"> sld.date <span class="keyword">AS</span> dateTime,</span><br><span class="line"> oe.NAME <span class="keyword">AS</span> offerName,</span><br><span class="line"> ad.id <span class="keyword">AS</span> advertiserId,</span><br><span class="line"> ad.company <span class="keyword">AS</span> advertiserName,</span><br><span class="line"> af.company <span class="keyword">AS</span> affiliateName,</span><br><span class="line"> sld.aff_id <span class="keyword">AS</span> affiliateId,</span><br><span class="line"> sld.origin_source_id <span class="keyword">AS</span> originSourceId,</span><br><span class="line"> sld.new_source_id <span class="keyword">AS</span> newSourceId,</span><br><span class="line"> sld.action,</span><br><span class="line"> co.option_name <span class="keyword">AS</span> actionName,</span><br><span class="line"> sld.CODE,</span><br><span class="line"> con.option_name <span class="keyword">AS</span> codeName,</span><br><span class="line"> <span class="keyword">SUM</span>( sld.quantity ) <span class="keyword">AS</span> quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> server_log_daily sld</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option co <span class="keyword">ON</span> co.option_value = sld.action </span><br><span class="line"> <span class="keyword">AND</span> co.group_id = <span class="number">38</span></span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option con <span class="keyword">ON</span> con.option_value = sld.CODE </span><br><span class="line"> <span class="keyword">AND</span> con.group_id = <span class="number">39</span></span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> offer oe <span class="keyword">ON</span> oe.id = sld.offer_id</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> advertiser ad <span class="keyword">ON</span> ad.id = oe.advertiser_id</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> affiliate af <span class="keyword">ON</span> af.id = sld.aff_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"> <span class="number">1</span> = <span class="number">1</span> </span><br><span class="line"> <span class="keyword">AND</span> sld.action = <span class="number">1</span></span><br><span class="line"> <span class="keyword">AND</span> sld.type = <span class="number">1</span>  </span><br><span class="line"> <span class="keyword">AND</span> sld.date &gt;= <span class="string">&#x27;2020-11-17&#x27;</span></span><br><span class="line"> <span class="keyword">AND</span> sld.date &lt;= <span class="string">&#x27;2020-11-19&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"> sld.date,</span><br><span class="line"> advertiserId,</span><br><span class="line"> affiliateId,</span><br><span class="line"> originSourceId,</span><br><span class="line"> newSourceId,</span><br><span class="line"> <span class="keyword">action</span>,</span><br><span class="line"> actionName,</span><br><span class="line"> CODE,</span><br><span class="line"> codeName,</span><br><span class="line"> offerId,</span><br><span class="line"> dateTime,</span><br><span class="line"> offerName </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"> dateTime <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>查看sql执行时间：执行了14秒，显然是不尽人意的。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126183101310.png" alt="image-20201126183101310"></p>
<p>通过sql，我们可以发现关联了5张表，且由于group by字段太多。再来看看各个表数据量的情况。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126172936560.png" alt="image-20201126172936560"></p>
<p>server_log_daily表，还是很大的。</p>
<h3 id="2-这边使用explain查看一下sql的执行计划"><a href="#2-这边使用explain查看一下sql的执行计划" class="headerlink" title="2.这边使用explain查看一下sql的执行计划"></a>2.这边使用explain查看一下sql的执行计划</h3><p><strong><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126180111878.png" alt="image-20201126180111878"></strong></p>
<p>重点看type，row，filtered这三个字段，range证明是走了索引的，rows代表走索引的行数，filtered命中索引的百分比。这里可以看出sld也就是daily表，filtered命中索引太低了才1，也就是说99%都没有走索引。所以我们得优化。</p>
<p>2.优化</p>
<p>优化Sql首先想到的是建立索引，这里可以通过explain执行计划看到是走了索引的。所以我们需要想到其他的方式来优化。首先server_log_daily是一张大表，由于一次查询数据数据量太大，所以我们可以考虑分页，先查找到daily表中进分页再连接表，这样只查询daily表中的25条记录，这样type即使是all由于数据量不多，执行起来也是很快的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">	tmp.offerId,</span><br><span class="line">	tmp.dateTime,</span><br><span class="line">	oe.NAME <span class="keyword">AS</span> offerName,</span><br><span class="line">	tmp.affiliateId,</span><br><span class="line">	af.company <span class="keyword">AS</span> affiliateName,</span><br><span class="line">	ad.id <span class="keyword">AS</span> advertiserId,</span><br><span class="line">	ad.company <span class="keyword">AS</span> advertiserName,</span><br><span class="line">	tmp.originSourceId,</span><br><span class="line">	tmp.newSourceId,</span><br><span class="line">	co.option_name <span class="keyword">AS</span> actionName,</span><br><span class="line">	tmp.action,</span><br><span class="line">	tmp.CODE,</span><br><span class="line">	con.option_name <span class="keyword">AS</span> codeName,</span><br><span class="line">	tmp.quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	sld.offer_id <span class="keyword">AS</span> offerId,</span><br><span class="line">	sld.date <span class="keyword">AS</span> dateTime,</span><br><span class="line">	sld.aff_id <span class="keyword">AS</span> affiliateId,</span><br><span class="line">	sld.origin_source_id <span class="keyword">AS</span> originSourceId,</span><br><span class="line">	sld.new_source_id <span class="keyword">AS</span> newSourceId,</span><br><span class="line">	sld.action,</span><br><span class="line">	sld.CODE,</span><br><span class="line">	<span class="keyword">SUM</span>( sld.quantity ) <span class="keyword">AS</span> quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	server_log_daily sld </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	<span class="number">1</span> = <span class="number">1</span> </span><br><span class="line">	<span class="keyword">AND</span> sld.action = <span class="number">1</span></span><br><span class="line">	<span class="keyword">AND</span> sld.type = <span class="number">1</span> </span><br><span class="line">	<span class="keyword">AND</span> sld.date = <span class="string">&#x27;2020-11-19&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	sld.date,</span><br><span class="line">	sld.aff_id,</span><br><span class="line">	sld.origin_source_id,</span><br><span class="line">	sld.new_source_id,</span><br><span class="line">	sld.action,</span><br><span class="line">	sld.CODE,</span><br><span class="line">	sld.offer_id </span><br><span class="line">	<span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">25</span></span><br><span class="line">	) tmp</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> offer oe <span class="keyword">ON</span> oe.id = tmp.offerId</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> affiliate af <span class="keyword">ON</span> af.id = tmp.affiliateId</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> advertiser ad <span class="keyword">ON</span> ad.id = oe.advertiser_id</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option co <span class="keyword">ON</span> co.option_value = tmp.action </span><br><span class="line">	<span class="keyword">AND</span> co.group_id = <span class="number">38</span></span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option con <span class="keyword">ON</span> con.option_value = tmp.CODE </span><br><span class="line">	<span class="keyword">AND</span> con.group_id = <span class="number">39</span></span><br></pre></td></tr></table></figure>

<p>优化后：sql只执行了1秒多，基本符合我们的心理预期。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126183359630.png" alt="image-20201126183359630"></p>
<h3 id="3-优化sql"><a href="#3-优化sql" class="headerlink" title="3.优化sql"></a>3.优化sql</h3><p>1.使用索引</p>
<p>2.分区，分表（修改表结构会给业务带来很大的工作量，一般情况下不建议）</p>
<p>3.分页，提升性能</p>
<p>4.少用*,  count可以使用count(1)代替具体列</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>与地球的第一次相遇</title>
    <url>/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/</url>
    <content><![CDATA[<p>地球是一只英短银渐层猫咪，是我女朋友和我在她同事那买的一只只有2个月大的小猫咪。<br>十一月，是我与她的第一次见面，由于还不熟悉，她对我们还是心有芥蒂。<br>偷看她!!!<br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/1.png" alt="偷拍1"><br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/2.png" alt="偷拍2"><br>与她的晚餐：<br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/3.png" alt="晚饭"><br>我相信她会慢慢的向我们靠近的！</p>
]]></content>
      <categories>
        <category>地球</category>
        <category>猫咪</category>
      </categories>
      <tags>
        <tag>地球</tag>
        <tag>宠物</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次搭建个人博客</title>
    <url>/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>前言：</strong></p>
<p>​    之前一直想搭建一个人博客，奈何一直没有时间；最近工作任务较轻松，决定搭建个人博客来记录生活点点滴滴和工作难题。</p>
<p>​    搭建个人博客方式有很多种，这里我是用<a href="https://hexo.io/zh-cn/docs">Hexo</a>+ Github来搭建博客的。</p>
<a id="more"></a>
<p><strong><em>主要流程：</em></strong></p>
<ol>
<li>搭建Node.js环境</li>
<li>搭建git环境</li>
<li>Github的注册和配置</li>
<li>安装配置Hexo</li>
<li>关联Hexo和GihubPages</li>
<li>GitHub Pages 地址解析到个人域名</li>
<li>Hexo 的常用操作</li>
</ol>
<h3 id="搭建Node-js环境"><a href="#搭建Node-js环境" class="headerlink" title="搭建Node.js环境"></a>搭建Node.js环境</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p>
<p>在Node官网下载<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>，安装。</p>
<h3 id="搭建git环境"><a href="#搭建git环境" class="headerlink" title="搭建git环境"></a>搭建git环境</h3><p>git是一款优秀的版本库管理工具，在 Git 官网：<a href="https://link.jianshu.com/?t=https://git-scm.com/">https://git-scm.com/</a> 下载安装。</p>
<h4 id="GitHub-注册和配置"><a href="#GitHub-注册和配置" class="headerlink" title="GitHub 注册和配置"></a>GitHub 注册和配置</h4><p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub，这里主要是通过Git将Hexo与Github相关联，通过Github自带的域名进行访问。</p>
<p>Github注册：<a href="https://link.jianshu.com/?t=https://github.com/">https://github.com/</a></p>
<p>1.新建一个private仓库</p>
<p>新建一个名为<code>你的用户名.github.io</code>，<em>注意：这里仓库名必须为该格式，否则无法正常访问</em>；</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118183453157.png" alt="image-20201118183453157"></p>
<p>2.设置域名访问：打开仓库设置找到<code>Github Pages</code></p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118183748517.png" alt="image-20201118183748517"></p>
<p>访问<a href="https://codingboypeng.github.io/">https://codingboypeng.github.io/</a>，如出现<code>codingboypeng.github.io/</code>证明配置成功。(注意这里需要换成你的域名地址)</p>
<h3 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h3><p><strong>使用 npm 安装 Hexo</strong>：在命令行中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>我们可以使用<code>hexo version</code>查看hexo版本，如出现如下图所示，则证明Hexo安装成功。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118185144748.png" alt="image-20201118185144748"></p>
<p>当然如果不了解hexo常用命令我们可以输入<code>hexo</code>将会提示，如下图：</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118184918362.png" alt="image-20201118184918362"></p>
<p>当安装完成后我们使用<a href="https://vscode.en.softonic.com/">VS Code</a>打开该项目，hexo目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy         #需要部署的文件</span><br><span class="line">├── node_modules    #Hexo插件</span><br><span class="line">├── public          #生成的静态网页文件</span><br><span class="line">├── scaffolds       #模板</span><br><span class="line">├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">| ├── _drafts       #草稿</span><br><span class="line">| └── _posts        #文章</span><br><span class="line">├── themes          #主题</span><br><span class="line">├── _config.yml     #全局配置文件</span><br><span class="line">└── package.json    #npm 依赖等</span><br></pre></td></tr></table></figure>

<p>使用<code>hexo server</code>运行本地项目，访问<a href="https://localhost:4000/">https://localhost:4000</a>，出现如下界面说明运行成功。当然这只是本地运行，别人是看不见的，所以接下来需要将<code>hexo</code>部署到github。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118190049202.png" alt="image-20201118190049202"></p>
<h3 id="关联Hexo和GihubPages"><a href="#关联Hexo和GihubPages" class="headerlink" title="关联Hexo和GihubPages"></a>关联Hexo和GihubPages</h3><p>通过git生成一个ssh key，将ssh key加入到对应项目中以此建立关联。（如果你已存在ssh key，可以在C:\Users\用户名\.ssh\id_rsa.pub中）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>在github新建的youname.github.io添加一个ssh key，将生成的ssh key保存到该仓库中；点开用户<code>settings</code>找到<code>SSH and GPG keys</code>将复制过来的ssh key粘贴到文本框中。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201120173436729.png" alt="image-20201120173436729"></p>
<p>配置git邮箱密码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;1206226332@qq.com&quot;</span></span><br><span class="line">git config --global user.password <span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>

<p>修改Hexo的<code>_config.yml</code>的<code>deploy</code>节点，替换成你的仓库地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:CodingBoyPeng/codingboypeng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>本地文件提交到git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除旧的 public 文件</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成新的 public 文件</span><br><span class="line">hexo generate</span><br><span class="line">或者</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开始部署</span><br><span class="line">hexo deploye</span><br><span class="line">或者</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这时可以通过访问<a href="https://codingboypeng.github.io/">https://codingboypeng.github.io</a>，可以看到你的个人博客啦</p>
<p>最后，感谢博主<a href="https://www.jianshu.com/p/39562a0d8eb6">BXM</a>，也就是我的实习同事；哈哈哈， 世界真的很小！！！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>XML中的CDATA</title>
    <url>/2020/11/17/XML%E4%B8%AD%E7%9A%84CDATA/</url>
    <content><![CDATA[<p>CDATA是什么，这是XML语法。在CDATA内部的所有内容都会被解析器忽略。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM xxl_job_registry AS t</span><br><span class="line">WHERE t.update_time &lt;![CDATA[ &gt; ]]&gt; DATE_ADD(#&#123;nowTime&#125;,INTERVAL -#&#123;timeout&#125; SECOND)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>类似与</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> xxl_job_registry <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.update_time &gt; <span class="keyword">DATE_ADD</span>(<span class="comment">#&#123;nowTime&#125;,INTERVAL -#&#123;timeout&#125; SECOND)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
</search>
