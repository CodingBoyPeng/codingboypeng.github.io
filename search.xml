<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CentOS手动更新gcc</title>
    <url>/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/</url>
    <content><![CDATA[<h1 id="CentOS手动更新gcc"><a href="#CentOS手动更新gcc" class="headerlink" title="CentOS手动更新gcc"></a>CentOS手动更新gcc</h1><p>不久前在阿里云服务买了台服务器，急忙的装了jdk，mysql……</p>
<p>步入正题，<code>centos7</code>默认的gcc版本是<code>4.8</code>，<code>仅支持c++11</code>，更高版本需要自行手动升级，所以想给它升级一下。。。哪想会有这么多坑！！！</p>
<p><img src="/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/image-20210105141953681.png" alt="image-20210105141953681"></p>
<h4 id="1-手动升级，需要去下载对应的tar包，放到linux环境中进行解压"><a href="#1-手动升级，需要去下载对应的tar包，放到linux环境中进行解压" class="headerlink" title="1.手动升级，需要去下载对应的tar包，放到linux环境中进行解压"></a>1.手动升级，需要去下载对应的tar包，放到linux环境中进行解压</h4><p>可以在<a href="https://ftp.gnu.org/gnu/gcc/">gcc版本库</a>中下载所需版本，这里我下载的是9.2版本，下载完成后放到服务器上解压。</p>
<p><img src="/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/image-20210105142725271.png" alt="image-20210105142725271"></p>
<h4 id="2-我们cd-gcc-9-2-0目录下-此时还不能直接安装，-linux在安装包时会有检验包依赖的过程，安装gcc需要3个包，分别是gmp-mpfr-mpc"><a href="#2-我们cd-gcc-9-2-0目录下-此时还不能直接安装，-linux在安装包时会有检验包依赖的过程，安装gcc需要3个包，分别是gmp-mpfr-mpc" class="headerlink" title="2.我们cd gcc-9.2.0目录下,  此时还不能直接安装， linux在安装包时会有检验包依赖的过程，安装gcc需要3个包，分别是gmp, mpfr, mpc"></a>2.我们<code>cd gcc-9.2.0</code>目录下,  此时还不能直接安装， linux在安装包时会有检验包依赖的过程，安装<code>gcc</code>需要3个包，分别是<code>gmp, mpfr, mpc</code></h4><p>同样，这三个包可自动下载，也可手动下载。</p>
<p><em>手动下载地址</em>： <a href="http://ftp.gnu.org/pub/gnu/gmp/">gmp</a>，<a href="https://www.mpfr.org/history.html">mpfr</a>，<a href="http://ftp.gnu.org/gnu/mpc/">mpc</a></p>
<p><code>(如果是手动下载，需要对下载后的包进行解压，然后cd到对应目录下安装编译 ./configure --prefix=/软件安装路径,make &amp;&amp; make install)</code></p>
<p><em>自动安装：</em>相对于手动安装简单许多，在gcc目录下执行<code>./contrib/download_prerequisites</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;contrib&#x2F;download_prerequisites</span><br><span class="line">&#x2F;&#x2F; 这条命令的意思就是下载上面3个包文件</span><br></pre></td></tr></table></figure>

<p>控制台出现<code>All prerequisites downloaded successfully</code>，证明三个包文件下载成功</p>
<h4 id="3-生成Makefile文件"><a href="#3-生成Makefile文件" class="headerlink" title="3.生成Makefile文件"></a>3.生成Makefile文件</h4><p>在gcc安装目录下创建一个<code>gcc-build</code>文件，用于存放<code>gcc编译文件</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost gcc-9.2.0]# mkdir gcc-build-9.3.0 </span><br><span class="line">[root@localhost gcc-9.2.0]# cd gcc-build-9.3.0  &#x2F;&#x2F; cd到gcc-build目录下</span><br><span class="line">[root@localhost gcc-9.2.0]# ..&#x2F;configure --enable-checking&#x3D;release --enable-languages&#x3D;c,c++ --disable-multilib  </span><br><span class="line">&#x2F;&#x2F; 表示gcc支持哪些语言</span><br></pre></td></tr></table></figure>

<h4 id="4-编译make"><a href="#4-编译make" class="headerlink" title="4.编译make"></a>4.编译make</h4><p>这里是最重…要的一步！这一步差不多消耗<code>3-4小时</code>进行编译，请你预安排好执行。</p>
<p><em>可以使用多个线程进行处理，但请先了解当前处理器的配置，避免安装失败</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost gcc-build-9.3.0]# make [-j4] 　&#x2F;&#x2F;表示启动四个线程来编译gcc，[]表示可省略</span><br></pre></td></tr></table></figure>

<h4 id="5-安装、查看gcc版本"><a href="#5-安装、查看gcc版本" class="headerlink" title="5.安装、查看gcc版本"></a>5.安装、查看gcc版本</h4><p>这一步<code>make install</code>执行安装。安装完成后，使用<code>gcc -v</code>查看gcc版本。</p>
<p><img src="/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/image-20210105145847495.png" alt="image-20210105145847495"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>XML中的CDATA</title>
    <url>/2020/11/17/XML%E4%B8%AD%E7%9A%84CDATA/</url>
    <content><![CDATA[<p>CDATA是什么，这是XML语法。在CDATA内部的所有内容都会被解析器忽略。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM xxl_job_registry AS t</span><br><span class="line">WHERE t.update_time &lt;![CDATA[ &gt; ]]&gt; DATE_ADD(#&#123;nowTime&#125;,INTERVAL -#&#123;timeout&#125; SECOND)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>类似与</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> xxl_job_registry <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.update_time &gt; <span class="keyword">DATE_ADD</span>(<span class="comment">#&#123;nowTime&#125;,INTERVAL -#&#123;timeout&#125; SECOND)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql自动分区</title>
    <url>/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="Mysql表分区"><a href="#Mysql表分区" class="headerlink" title="Mysql表分区"></a>Mysql表分区</h1><p>公司的业务报表需要查询到历年数据，  表是以小时为维度统计的导致数据量太大，查询效率太低下。</p>
<p>公司现采用的策略是一个月生成一张表，以<code>hour_data_YYYYMM</code></p>
<p>方式。这种方式会造成修改处过多，工作量太大；所以我们可以将表按月进行分区。</p>
<p>注意：当表中含有主键或唯⼀键时，则每个被⽤作<strong>分区函数的字段必须是表中唯⼀键和主键的全部或⼀部分</strong></p>
<h2 id="分区方式"><a href="#分区方式" class="headerlink" title="分区方式"></a>分区方式</h2><p>mysql分区分为</p>
<ul>
<li><p>RANGE表分区：范围表分区，按照⼀定的<strong>范围值</strong>来确定每个分区包含的数据</p>
</li>
<li><p>LIST表分区：列表表分区，按照⼀个⼀个<strong>确定的值</strong>来确定每个分区包含的数据</p>
</li>
<li><p>HASH表分区：哈希表分区，按照⼀个<strong>⾃定义的函数返回值</strong>来确定每个分区包含的数据</p>
</li>
<li><p>KEY表分区 ：key表分区，与哈希表分区类似，只是⽤MySQL⾃⼰的<strong>HASH函数</strong>来确定每个分区包含的数据</p>
</li>
</ul>
<p>Range表分区</p>
<p>按照一定的返回值来确定每个分区的数据，分区函数的字段必须为整形，分区范围需要连续。符合范围条件的数据将会写入对应的分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE employees ( id INT NOT NULL,</span><br><span class="line"> fname VARCHAR(30), lname VARCHAR(30),</span><br><span class="line"> store_id INT NOT NULL </span><br><span class="line"> primary key (&#96;id&#96;, &#96;store_id&#96;)    -- 这里因为有主键字段，分区字段必须是主键和唯一索引的全部或一部分                    </span><br><span class="line"> )</span><br><span class="line"> PARTITION BY RANGE (store_id)</span><br><span class="line"> ( PARTITION p0 VALUES LESS THAN (6), PARTITION p1 VALUES LESS THAN (11),</span><br><span class="line"> PARTITION p2 VALUES LESS THAN (16), PARTITION p3 VALUES LESS THAN (21) );</span><br></pre></td></tr></table></figure>

<p>其他分区可以自行去了解。</p>
<p><code>其中range分区和list分区，若分区字段不在分区范围中会报错</code></p>
<p>mysql不支持自动分区，我们可以使用event事件来定时执行，如果对应分区存在则不创建，反之创建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;hour_data_202012&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;date_hour&#96; int(11) NOT NULL   COMMENT &#39;int类型的小时时间，就像2018-09-05 11:00:00对应的int类型的数值&#39;,</span><br><span class="line">  &#96;date&#96; int(11) NULL DEFAULT NULL COMMENT &#39;int类型的日期，就是2018-09-05转换成的int类型&#39;,</span><br><span class="line">  &#96;offer_id&#96; int(11) NULL DEFAULT NULL COMMENT &#39;offerID，来自offer表的主键&#39;,</span><br><span class="line">  &#96;aff_id&#96; int(10) NULL DEFAULT NULL COMMENT &#39;下游渠道id&#39;,</span><br><span class="line">  &#96;origin_source_id&#96; varchar(180) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;&#39; COMMENT &#39;下游上报的原始sourceId，默认会考虑把_之前的保留，其他的放弃，否则sourceid会太多&#39;,</span><br><span class="line">  &#96;new_source_id&#96; int(11) NULL DEFAULT 0 COMMENT &#39;加密后的新sourceId，默认为0&#39;,</span><br><span class="line">  &#96;geo&#96; char(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;&#39; COMMENT &#39;geo，aff上报的所在地geo&#39;,</span><br><span class="line">  &#96;event_id&#96; tinyint(4) NULL DEFAULT 1 COMMENT &#39;event_id，来自于offer_event_adv的event_id定义&#39;,</span><br><span class="line">  &#96;impressions&#96; int(11) NULL DEFAULT 0 COMMENT &#39;impressions&#39;,</span><br><span class="line">  &#96;clicks&#96; int(11) NULL DEFAULT 0 COMMENT &#39;点击数，只在install事件时有数据，其他event下都为0&#39;,</span><br><span class="line">  &#96;revenue_num&#96; int(11) NULL DEFAULT 0 COMMENT &#39;我们接收到的数据，比如转化数、注册数&#39;,</span><br><span class="line">  &#96;payout_num&#96; int(11) NULL DEFAULT 0 COMMENT &#39;给下游的数据，比如转化数、注册数&#39;,</span><br><span class="line">  &#96;revenue&#96; decimal(10, 2) NULL DEFAULT 0.00 COMMENT &#39;这个小时我们的收益&#39;,</span><br><span class="line">  &#96;payout&#96; decimal(10, 2) NULL DEFAULT 0.00 COMMENT &#39;这个小时给下游的费用&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;,  &#96;date_hour&#96;) USING BTREE,</span><br><span class="line">  UNIQUE INDEX &#96;unique_offer_date_aff_hour_2&#96;(&#96;offer_id&#96;, &#96;aff_id&#96;, &#96;event_id&#96;, &#96;date_hour&#96;, &#96;origin_source_id&#96;, &#96;new_source_id&#96;, &#96;geo&#96;) USING BTREE,</span><br><span class="line">  INDEX &#96;date_index2&#96;(&#96;date&#96;) USING BTREE,</span><br><span class="line">  INDEX &#96;report_index2&#96;(&#96;date_hour&#96;, &#96;date&#96;, &#96;offer_id&#96;, &#96;aff_id&#96;, &#96;event_id&#96;, &#96;geo&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 102964582 CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci COMMENT &#x3D; &#39;每日每小时sourceid数据表。注意价格是实时变化的，这里需要注意每月一张表&#39; ROW_FORMAT &#x3D; COMPACT</span><br><span class="line">	PARTITION BY RANGE (date_hour)</span><br><span class="line">	(PARTITION p202101 VALUES LESS THAN (1609747898)); -- 新建表时创建一个分区</span><br></pre></td></tr></table></figure>

<p><strong>存储过程</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER &#x2F;&#x2F;</span><br><span class="line">#该表所在数据库名称</span><br><span class="line">USE &#96;test&#96; &#x2F;&#x2F; DROP PROCEDURE</span><br><span class="line">IF</span><br><span class="line">	EXISTS &#96;create_partition_by_month&#96; &#x2F;&#x2F; CREATE PROCEDURE &#96;create_partition_by_month&#96; ( IN_SCHEMANAME VARCHAR ( 64 ), IN_TABLENAME VARCHAR ( 64 ) ) BEGIN</span><br><span class="line">	DECLARE</span><br><span class="line">		ROWS_CNT INT UNSIGNED;   -- 符合指定分区的个数</span><br><span class="line">	DECLARE</span><br><span class="line">		BEGINTIME TIMESTAMP;		</span><br><span class="line">	DECLARE</span><br><span class="line">		ENDTIME INT UNSIGNED;</span><br><span class="line">	DECLARE</span><br><span class="line">		PARTITIONNAME VARCHAR ( 16 );</span><br><span class="line">	DECLARE</span><br><span class="line">		ENDTIME_DATETIME VARCHAR ( 30 );</span><br><span class="line">	</span><br><span class="line">	SET BEGINTIME &#x3D; DATE( NOW( ) - INTERVAL DAY ( NOW( ) ) DAY + INTERVAL 1 DAY + INTERVAL 1 MONTH );</span><br><span class="line">    select BEGINTIME;</span><br><span class="line">	SET PARTITIONNAME &#x3D; DATE_FORMAT( BEGINTIME, &#39;p%Y%m&#39; );</span><br><span class="line">    select PARTITIONNAME;</span><br><span class="line">	SET ENDTIME &#x3D; UNIX_TIMESTAMP( BEGINTIME + INTERVAL 1 MONTH );</span><br><span class="line">	select endtime;</span><br><span class="line">	-- 查询指定schema，指定表，符合指定分区的记录数</span><br><span class="line">	SELECT</span><br><span class="line">		COUNT( * ) INTO ROWS_CNT </span><br><span class="line">	FROM</span><br><span class="line">		information_schema.PARTITIONS </span><br><span class="line">	WHERE</span><br><span class="line">		table_schema &#x3D; IN_SCHEMANAME </span><br><span class="line">		AND table_name &#x3D; IN_TABLENAME </span><br><span class="line">		AND partition_name &#x3D; PARTITIONNAME;</span><br><span class="line">	IF ROWS_CNT &#x3D; 0 THEN	 -- 若不存在则创建</span><br><span class="line">			SET @SQL &#x3D; CONCAT( &#39;ALTER TABLE &#96;&#39;, IN_SCHEMANAME, &#39;&#96;.&#96;&#39;, IN_TABLENAME, &#39;&#96;&#39;, &#39; ADD PARTITION (PARTITION &#39;, PARTITIONNAME, &quot; VALUES LESS THAN (&quot;, ENDTIME, &quot;) ENGINE &#x3D; InnoDB);&quot; );</span><br><span class="line">		PREPARE STMT </span><br><span class="line">		FROM</span><br><span class="line">			@SQL;</span><br><span class="line">		EXECUTE STMT;</span><br><span class="line">		DEALLOCATE PREPARE STMT;</span><br><span class="line">	ELSE SELECT</span><br><span class="line">			CONCAT( &quot;partition &#96;&quot;, PARTITIONNAME, &quot;&#96; for table &#96;&quot;, IN_SCHEMANAME, &quot;.&quot;, 		IN_TABLENAME, &quot;&#96; already exists&quot; ) AS result;</span><br><span class="line">	END IF;</span><br><span class="line"></span><br><span class="line">END &#x2F;&#x2F;</span><br><span class="line">DELIMITER;</span><br><span class="line">--  删除存储过程												 </span><br><span class="line">--  DROP PROCEDURE   create_partition_by_month                     </span><br><span class="line">--  手动测试</span><br><span class="line">call create_partition_by_month(&quot;test&quot;, &quot;hour_data_202012&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>数据库定时任务：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">#该表所在的数据库名称</span><br><span class="line">USE &#96;ycdb&#96;$$</span><br><span class="line">CREATE EVENT IF NOT EXISTS &#96;Month_partition_t1&#96;</span><br><span class="line">ON SCHEDULE EVERY 1 hour   #执行周期，还有天、月等等</span><br><span class="line">STARTS &#39;2020-08-10 17:00:00&#39;</span><br><span class="line">ON COMPLETION PRESERVE</span><br><span class="line">ENABLE</span><br><span class="line">COMMENT &#39;Creating partitions By month&#39;</span><br><span class="line">DO BEGIN</span><br><span class="line">    #调用刚才创建的存储过程，第一个参数是数据库名称，第二个参数是表名称</span><br><span class="line">    CALL ycdb.create_partition_by_month(&quot;test&quot;, &quot;hour_data_202012&quot;);</span><br><span class="line">END$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img src="/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/image-20210104185441855.png" alt="image-20210104185441855"></p>
<p>查询分区<code>p202101</code>的数据：</p>
<p><img src="/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/image-20210104203138681.png" alt="image-20210104203138681"></p>
<p>查询分区 <code>p202102</code>:</p>
<p><img src="/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/image-20210104203210201.png" alt="image-20210104203210201"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>selenuim的安装和配置</title>
    <url>/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="使用Selenuim自动化"><a href="#使用Selenuim自动化" class="headerlink" title="使用Selenuim自动化"></a>使用Selenuim自动化</h2><p>（1）第一步，我们需要查看浏览器版本，再下载对应的浏览器驱动</p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200901172911708.png" alt="image-20200901172911708"></p>
<p>浏览器驱动和浏览器版本对照表：<a href="https://www.cnblogs.com/xiaoyujuan/p/13580258.html">https://www.cnblogs.com/xiaoyujuan/p/13580258.html</a></p>
<p>驱动下载地址：<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></p>
<p>（2）第二步，配置环境变量</p>
<p>​        1.首先我们应该找到浏览器安装包所在位置，将ChromeDriver.exe复制其根目录下</p>
<p>​            <img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904175241549.png" alt="image-20200904175241549"></p>
<p>​        2.再将当前路径配置导环境变量Path中，打开cmd输入chromedriver检验是否安装成功</p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904175917351.png" alt="image-20200904175917351"></p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904180008917.png" alt="image-20200904180008917">        </p>
<p>​        3.最后将ChromeDriver.exe复制Python解释器的安装路径下</p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904175509882.png" alt="image-20200904175509882"></p>
<p>（3）安装selenuim库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install Selenium</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>selenuim</tag>
      </tags>
  </entry>
  <entry>
    <title>html中的attr和css区别</title>
    <url>/2020/12/13/html%E4%B8%AD%E7%9A%84attr%E5%92%8Ccss%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>本人再通过jquery给input标签添加visibility属性（保留网页物理空间）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$.(&quot;#input&quot;).attr(&quot;visibility&quot;, &quot;none&quot;)</span><br></pre></td></tr></table></figure>

<p>并没有生效。最终发现应该调用.css方法，如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$.(&quot;#input&quot;).css(&quot;visibility&quot;, &quot;none&quot;)</span><br></pre></td></tr></table></figure>

<p>原因是style是标签的属性，而visibility是style的子属性，结构如下</p>
<p><img src="/2020/12/13/html%E4%B8%AD%E7%9A%84attr%E5%92%8Ccss%E5%8C%BA%E5%88%AB/image-20201213195806971.png" alt="image-20201213195806971"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery元素绑定事件失效的原因</title>
    <url>/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>今天开发过程中在给页面初始化设置的适合遇见了绑定事件无效的问题，特此总结下。以往给指定元素绑定事件是因为id或class是经过渲染后的，是动态的，才导致页面<code>定位出错</code>。这次并不是<code>定位出错</code>，而是<code>有效</code>的（我手动在浏览器里执行了）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 请求ajax，进行页面的intput二级联动</span><br><span class="line">initAdvSourceType(&quot;$&#123;advSourceType&#125;&quot;);</span><br><span class="line">// 给渲染出来标签赋初始值</span><br><span class="line">echoData();</span><br></pre></td></tr></table></figure>

<p>select二级联动<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224234414431.png" alt="image-20201224234414431"><br>给渲染的标签赋值<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224234459006.png" alt="image-20201224234459006"><br>手动执行一下，居然成功了。到这里说明并不是定位不到元素，仔细想想可能是在ajax还没有执行完毕（<code>ajax是异步</code>）就已经执行了该<code>标签赋值</code>方法。因为ajax是异步的，会另起一个线程去执行接下来的代码。<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224235045884.png" alt="image-20201224235045884"><br>分析好原因后，所以我们要解决的就是想办法让操作同步，所以我们可以在ajax拿到数据渲染后我们再进行赋值初始化操作<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224235715203.png" alt="image-20201224235045884"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>xxl-job整合钉钉机器人实现服务监控</title>
    <url>/2020/12/14/xxl-job%E6%95%B4%E5%90%88%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h1 id="XXL-JOB整合钉钉机器人"><a href="#XXL-JOB整合钉钉机器人" class="headerlink" title="XXL-JOB整合钉钉机器人"></a>XXL-JOB整合钉钉机器人</h1><p>XXLJOB默认支持的报警是邮件，我们关注邮件并不是特别及时，所以本人想将钉钉机器人集成XXL-JOB；</p>
<p>话不多说整，让我们开始吧！！！</p>
<p>首先我们在钉钉上创建一个三人以上的群， 随后自定义一个机器人</p>
<h3 id="1-创建机器人"><a href="#1-创建机器人" class="headerlink" title="1.创建机器人"></a>1.创建机器人</h3><p><img src="/2020/12/14/xxl-job%E6%95%B4%E5%90%88%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/image-20201112174723190.png" alt="image-20201112174723190"></p>
<p>这边我们可以定义多个关键字，以满足不同内容的任务告警。</p>
<h3 id="2-XXL-Job集成钉钉机器人"><a href="#2-XXL-Job集成钉钉机器人" class="headerlink" title="2.XXL-Job集成钉钉机器人"></a>2.XXL-Job集成钉钉机器人</h3><ul>
<li>加入pom依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--钉钉机器人通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alibaba-dingtalk-service-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在application.propertis文件中增加常量</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也就是我们的webhook地址</span></span><br><span class="line"><span class="meta">alarm.ding.accessToken</span> = <span class="string">9e962fca4cc894da988c06940079a20b8c3f50d227f90ce8b6afc7fa4d8de348</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新增DingJobAlarm</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 钉钉通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:Peng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2020/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingJobAlarm</span> <span class="keyword">implements</span> <span class="title">JobAlarm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;alarm.ding.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringBuilder dingUrl = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;https://oapi.dingtalk.com/robot/send&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doAlarm</span><span class="params">(XxlJobInfo info, XxlJobLog jobLog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> alarmResult = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;ding ---------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contactHttpPostUrl();</span><br><span class="line">            HashMap&lt;String, Object&gt; map = contactHttpPostParam(info, jobLog);</span><br><span class="line">            restTemplate.postForEntity(dingUrl.toString(), map, Object.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            alarmResult = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> alarmResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HashMap&lt;String, Object&gt; <span class="title">contactHttpPostParam</span><span class="params">(XxlJobInfo info, XxlJobLog jobLog)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msgtype&quot;</span>, <span class="string">&quot;text&quot;</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; contentMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        String content = <span class="string">&quot;定时任务失败： &quot;</span> + <span class="string">&quot;任务名称：&quot;</span> + info.getJobDesc() +</span><br><span class="line">                <span class="string">&quot;,执行器名称：&quot;</span> + info.getExecutorHandler() +</span><br><span class="line">                <span class="comment">// 钉钉机器人通知内容</span></span><br><span class="line">                <span class="string">&quot;,执行时间：&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="keyword">new</span> Date()) +</span><br><span class="line">                <span class="string">&quot;,执行器ip：&quot;</span> + jobLog.getExecutorAddress();</span><br><span class="line">        contentMap.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">        map.put(<span class="string">&quot;text&quot;</span>, contentMap);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">contactHttpPostUrl</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳，签名计算后的签名</span></span><br><span class="line">        Long timestamp = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 密钥</span></span><br><span class="line">        String secret = <span class="string">&quot;SECd7e8d13a32a779e7b2e344d8c698bf8f209f3561c7bb05bfd8aabd5d0f63fb2a&quot;</span>;</span><br><span class="line">        String stringToSign = timestamp + <span class="string">&quot;\n&quot;</span> + secret;</span><br><span class="line">        Mac mac = Mac.getInstance(<span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        mac.init(<span class="keyword">new</span> SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), <span class="string">&quot;HmacSHA256&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        String sign = URLEncoder.encode(<span class="keyword">new</span> String(Base64.encodeBase64(signData)),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        dingUrl.append(<span class="string">&quot;?access_token=&quot;</span>).append(accessToken)</span><br><span class="line">                .append(<span class="string">&quot;&amp;sign=&quot;</span>).append(sign)</span><br><span class="line">                .append(<span class="string">&quot;&amp;timestamp=&quot;</span>).append(timestamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/14/xxl-job%E6%95%B4%E5%90%88%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/image-20201112180132037.png" alt="image-20201112180132037"></p>
<p>当然钉钉通知可以支持markdown，图片等等。想详细研究请查看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>xxl-job</tag>
        <tag>钉钉机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>与地球的第一次相遇</title>
    <url>/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/</url>
    <content><![CDATA[<p>地球是一只英短银渐层猫咪，是我女朋友和我在她同事那买的一只只有2个月大的小猫咪。<br>十一月，是我与她的第一次见面，由于还不熟悉，她对我们还是心有芥蒂。<br>偷看她!!!<br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/1.png" alt="偷拍1"><br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/2.png" alt="偷拍2"><br>与她的晚餐：<br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/3.png" alt="晚饭"><br>我相信她会慢慢的向我们靠近的！</p>
]]></content>
      <categories>
        <category>地球</category>
        <category>猫咪</category>
      </categories>
      <tags>
        <tag>地球</tag>
        <tag>宠物</tag>
      </tags>
  </entry>
  <entry>
    <title>仨月的地球儿</title>
    <url>/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/</url>
    <content><![CDATA[<h1 id="可爱的球球仨月了"><a href="#可爱的球球仨月了" class="headerlink" title="可爱的球球仨月了"></a>可爱的球球仨月了</h1><p>球已经到家已经一个月了，现在已经特别粘人了。。。每次回到家开门，她就在门口瞪着大眼睛对着我，然后一直粘着你的脚跟。</p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202113835.png" alt="image-20201213202113835"></p>
<p>似乎在看我敲电脑。。。不屑你</p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202144924.png" alt="image-20201213202144924"></p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202201822.png" alt="image-20201213202201822"></p>
<p>长大了很多啊</p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202222905.png" alt="image-20201213202222905"></p>
<p>一起看综艺…</p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202259570.png" alt="image-20201213202259570"></p>
]]></content>
      <categories>
        <category>地球</category>
        <category>猫咪</category>
      </categories>
      <tags>
        <tag>地球</tag>
        <tag>宠物</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/01/15/%E5%9B%9E%E9%A1%BE2020/</url>
    <content><![CDATA[<p>-–</p>
<p>title: 回顾2020</p>
<p>date: 2021-01-15 14:40:16</p>
<p>tags: </p>
<p>  - 生活规划</p>
<p>categories: </p>
<p>  - 日常生活</p>
<p>-–</p>
<p>2020已经过去， 但回想起来经历的事，遇见的人都在脑海中一一浮现。</p>
<p>2020说起来是艰难的一年，也是‘幸运’的一年，艰难的是年初疫情让我无法正常工作，人生的第一份实习工作也就因此结束了。辞退给我的信心大打折扣 <code>第一份工作被辞退的确很难受</code>，被辞退的我并没有选择再去深圳找工作，而是选择了等接下来3、4月的春招。</p>
<p>​    接下来的两个月里，忙着巩固<code>java</code>基础，其他时间用来陪陪爷爷奶奶。所以说2020对于我来说也是幸运的一年，即将宣告毕业的我可以好好利用学生旅途中最后一个来陪陪家人，如今的我已经23岁了，是该工作的年纪了意味着我没有时间陪家人了，所以我也很<code>感谢2020</code>。</p>
<p>​    话说回来，春招后我总共拿到的4家offer, 一家是南昌的，其他分别是广州，深圳，上海。<code>乡下的孩子还是很渴望去一线城市的</code>广州给的稍微低点<code>7.5K</code>并没有达到我期望薪资，<code>深圳</code>的<code>8k</code>但是需要大小周，最后我选择了<code>魔都</code>,一家相对于来说’比较好’的所谓8.5k的上海offer, 顺道感受一下魔都的魅力。</p>
<p>​    来到上海之后, 感觉和南昌并没有很大。。。来到我**网络技术公司所在的慧谷白猫科技园(可能听名字感觉很高大上，其实是一个很陈旧的科技园)。到了公司发现这其实是一个不到20平的小房子里，我的天呐，这种环境让我怎么受得了，这么小几十个人在一起也太压抑了。但是都说既来之则安之，既然来了还是踏踏实实的干吧，这毕竟是我的选择，来到属于我的工位上看见一张小的卡片写着“彭峰同学，入职愉快！！！”，对于一个外地人孤身一人来到上海这座大城市来说大概是最大的慰藉吧，环顾四周虽然房间不大但给人感觉是挺温暖的。</p>
<p>​    之后一个月里，过着忙碌的加班生活了每天都是10-11点到家，周末也是拿着电脑熟悉业务。直到6月7号吧结果被公司辞退了。对，你没有听错我还有10几天拿毕业证此前都是拿着每天200工资比之前实习还低，说转正8.5k的，快转正了就把我辞退了。现在想来当初入职体检还是我自己掏钱的这种公司不呆也罢，可是当时对于我来说</p>
<p>​    没有了工作收入，让我自己一个人在上海怎么过？我生命中最重要的人出现了，也就是我现在的女朋友，感谢她在我人生第一个低谷陪伴我、鼓励我！ 是她给了我信心与勇气。</p>
<p>​    被辞退后，在整个6月里就焦急地寻找着下一份工作，毕竟上海这消费还是很高的，不过好在是6,7月应届生职位还是不饱和的，我的运气还不算是太差。找工作还是很辛苦的，一天得面试2,3家，回到家身心俱疲。工作大概找了两个星期吧，boss, 前程无忧，51，智联，拉勾网简历都投的差不多<img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/boss.png" alt="boss">，大概投了1500份简历，可能沟通的却寥寥无几，更别提去面试的机会了。每天在家就是看看基础知识，这里十分感谢我前公司师傅，给我点明了方向，虽然没有一句显然的安慰，但是这远比那所谓的安慰有价值的多！眼见着身上之前在深圳实习存最后一点积蓄马上要被花完了，而面试都没有觉得整个人都颓废了，好在最后一星期找到了一份较为满意的工作，约了7月6号入职，到现在这一份工作已经稳定下来了，从这一份工作里学到了许多。</p>
<p>​    2020年10月，和我女朋友的第一次旅行，’南京’这一座12朝国都的城市在我心里留下了深刻的印象。东门这里有许多美味的小吃和各种小饰品，这里的小吃可以够我们吃一天的，实在太大了。</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201002_172351.jpg" alt="游南京">)</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201002_175805.jpg" alt="游南京">)</p>
<p>夫子庙忘记拍了，哈哈</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201004_195745.jpg" alt="游南京">)</p>
<p>1952街区这边的夜景很漂亮！</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201002_150231.jpg" alt="游南京">)</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201004_214714.jpg" alt="游南京">)</p>
<p>​    游了中山陵，中山陵特别大，我们并没有选择去美玲宫，实在太大了，感觉一天都在走路，晚上回酒店的路途中走的脚都疼，腿都感觉要断了。。。晚上就找了家药店买了瓶红花油回去擦了，貌似不怎么管用。余下的几天都是动都不想动了<strong>_</strong>。</p>
<p>假期完后，回到上海继续上班了。</p>
<p>​      到现在2021了。疫情又爆发了，这次过年是回不去了，不知道一个人在外地过年不知道是何一番景象。</p>
<pre><code>                   感谢2020，感谢2020遇到的每一个人。</code></pre>
]]></content>
  </entry>
  <entry>
    <title>千万级数据表优化</title>
    <url>/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="千万级数据表优化"><a href="#千万级数据表优化" class="headerlink" title="千万级数据表优化"></a>千万级数据表优化</h1><p>最近因为工作量不大，向老大讨了一个活—优化SeverLog。公司项目的ServerLog查询功能太慢（数据量千万级别），这对一个毫无Sql实战经验的人来说有点难以着手，不知道从何处入手。</p>
<h3 id="1-找到执行Sql"><a href="#1-找到执行Sql" class="headerlink" title="1.找到执行Sql"></a>1.找到执行Sql</h3><p>sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line"> sld.offer_id <span class="keyword">AS</span> offerId,</span><br><span class="line"> sld.date <span class="keyword">AS</span> dateTime,</span><br><span class="line"> oe.NAME <span class="keyword">AS</span> offerName,</span><br><span class="line"> ad.id <span class="keyword">AS</span> advertiserId,</span><br><span class="line"> ad.company <span class="keyword">AS</span> advertiserName,</span><br><span class="line"> af.company <span class="keyword">AS</span> affiliateName,</span><br><span class="line"> sld.aff_id <span class="keyword">AS</span> affiliateId,</span><br><span class="line"> sld.origin_source_id <span class="keyword">AS</span> originSourceId,</span><br><span class="line"> sld.new_source_id <span class="keyword">AS</span> newSourceId,</span><br><span class="line"> sld.action,</span><br><span class="line"> co.option_name <span class="keyword">AS</span> actionName,</span><br><span class="line"> sld.CODE,</span><br><span class="line"> con.option_name <span class="keyword">AS</span> codeName,</span><br><span class="line"> <span class="keyword">SUM</span>( sld.quantity ) <span class="keyword">AS</span> quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> server_log_daily sld</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option co <span class="keyword">ON</span> co.option_value = sld.action </span><br><span class="line"> <span class="keyword">AND</span> co.group_id = <span class="number">38</span></span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option con <span class="keyword">ON</span> con.option_value = sld.CODE </span><br><span class="line"> <span class="keyword">AND</span> con.group_id = <span class="number">39</span></span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> offer oe <span class="keyword">ON</span> oe.id = sld.offer_id</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> advertiser ad <span class="keyword">ON</span> ad.id = oe.advertiser_id</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> affiliate af <span class="keyword">ON</span> af.id = sld.aff_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"> <span class="number">1</span> = <span class="number">1</span> </span><br><span class="line"> <span class="keyword">AND</span> sld.action = <span class="number">1</span></span><br><span class="line"> <span class="keyword">AND</span> sld.type = <span class="number">1</span>  </span><br><span class="line"> <span class="keyword">AND</span> sld.date &gt;= <span class="string">&#x27;2020-11-17&#x27;</span></span><br><span class="line"> <span class="keyword">AND</span> sld.date &lt;= <span class="string">&#x27;2020-11-19&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"> sld.date,</span><br><span class="line"> advertiserId,</span><br><span class="line"> affiliateId,</span><br><span class="line"> originSourceId,</span><br><span class="line"> newSourceId,</span><br><span class="line"> <span class="keyword">action</span>,</span><br><span class="line"> actionName,</span><br><span class="line"> CODE,</span><br><span class="line"> codeName,</span><br><span class="line"> offerId,</span><br><span class="line"> dateTime,</span><br><span class="line"> offerName </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"> dateTime <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>查看sql执行时间：执行了14秒，显然是不尽人意的。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126183101310.png" alt="image-20201126183101310"></p>
<p>通过sql，我们可以发现关联了5张表，且由于group by字段太多。再来看看各个表数据量的情况。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126172936560.png" alt="image-20201126172936560"></p>
<p>server_log_daily表，还是很大的。</p>
<h3 id="2-这边使用explain查看一下sql的执行计划"><a href="#2-这边使用explain查看一下sql的执行计划" class="headerlink" title="2.这边使用explain查看一下sql的执行计划"></a>2.这边使用explain查看一下sql的执行计划</h3><p><strong><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126180111878.png" alt="image-20201126180111878"></strong></p>
<p>重点看type，row，filtered这三个字段，range证明是走了索引的，rows代表走索引的行数，filtered命中索引的百分比。这里可以看出sld也就是daily表，filtered命中索引太低了才1，也就是说99%都没有走索引。所以我们得优化。</p>
<p>2.优化</p>
<p>优化Sql首先想到的是建立索引，这里可以通过explain执行计划看到是走了索引的。所以我们需要想到其他的方式来优化。首先server_log_daily是一张大表，由于一次查询数据数据量太大，所以我们可以考虑分页，先查找到daily表中进分页再连接表，这样只查询daily表中的25条记录，这样type即使是all由于数据量不多，执行起来也是很快的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">	tmp.offerId,</span><br><span class="line">	tmp.dateTime,</span><br><span class="line">	oe.NAME <span class="keyword">AS</span> offerName,</span><br><span class="line">	tmp.affiliateId,</span><br><span class="line">	af.company <span class="keyword">AS</span> affiliateName,</span><br><span class="line">	ad.id <span class="keyword">AS</span> advertiserId,</span><br><span class="line">	ad.company <span class="keyword">AS</span> advertiserName,</span><br><span class="line">	tmp.originSourceId,</span><br><span class="line">	tmp.newSourceId,</span><br><span class="line">	co.option_name <span class="keyword">AS</span> actionName,</span><br><span class="line">	tmp.action,</span><br><span class="line">	tmp.CODE,</span><br><span class="line">	con.option_name <span class="keyword">AS</span> codeName,</span><br><span class="line">	tmp.quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	sld.offer_id <span class="keyword">AS</span> offerId,</span><br><span class="line">	sld.date <span class="keyword">AS</span> dateTime,</span><br><span class="line">	sld.aff_id <span class="keyword">AS</span> affiliateId,</span><br><span class="line">	sld.origin_source_id <span class="keyword">AS</span> originSourceId,</span><br><span class="line">	sld.new_source_id <span class="keyword">AS</span> newSourceId,</span><br><span class="line">	sld.action,</span><br><span class="line">	sld.CODE,</span><br><span class="line">	<span class="keyword">SUM</span>( sld.quantity ) <span class="keyword">AS</span> quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	server_log_daily sld </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	<span class="number">1</span> = <span class="number">1</span> </span><br><span class="line">	<span class="keyword">AND</span> sld.action = <span class="number">1</span></span><br><span class="line">	<span class="keyword">AND</span> sld.type = <span class="number">1</span> </span><br><span class="line">	<span class="keyword">AND</span> sld.date = <span class="string">&#x27;2020-11-19&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	sld.date,</span><br><span class="line">	sld.aff_id,</span><br><span class="line">	sld.origin_source_id,</span><br><span class="line">	sld.new_source_id,</span><br><span class="line">	sld.action,</span><br><span class="line">	sld.CODE,</span><br><span class="line">	sld.offer_id </span><br><span class="line">	<span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">25</span></span><br><span class="line">	) tmp</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> offer oe <span class="keyword">ON</span> oe.id = tmp.offerId</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> affiliate af <span class="keyword">ON</span> af.id = tmp.affiliateId</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> advertiser ad <span class="keyword">ON</span> ad.id = oe.advertiser_id</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option co <span class="keyword">ON</span> co.option_value = tmp.action </span><br><span class="line">	<span class="keyword">AND</span> co.group_id = <span class="number">38</span></span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option con <span class="keyword">ON</span> con.option_value = tmp.CODE </span><br><span class="line">	<span class="keyword">AND</span> con.group_id = <span class="number">39</span></span><br></pre></td></tr></table></figure>

<p>优化后：sql只执行了1秒多，基本符合我们的心理预期。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126183359630.png" alt="image-20201126183359630"></p>
<h3 id="3-优化sql"><a href="#3-优化sql" class="headerlink" title="3.优化sql"></a>3.优化sql</h3><p>1.使用索引</p>
<p>2.分区，分表（修改表结构会给业务带来很大的工作量，一般情况下不建议）</p>
<p>3.分页，提升性能</p>
<p>4.少用*,  count可以使用count(1)代替具体列</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>多个class名相同时，jquery定位指定class</title>
    <url>/2020/12/24/%E5%A4%9A%E4%B8%AAclass%E5%90%8D%E7%9B%B8%E5%90%8C%E6%97%B6%EF%BC%8Cjquery%E5%AE%9A%E4%BD%8D%E6%8C%87%E5%AE%9Aclass/</url>
    <content><![CDATA[<p>本人在开发一个新页面的时候，需要给经过动态渲染后的多个input框赋不同的值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> = <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackParam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> = <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackParam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> = <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackParam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> ……</span><br></pre></td></tr></table></figure>
<p>这边有6个经过动态渲染生成的input框，且类名都为<code>trackKey</code>。现在需要给它们一一赋值，值列表取自后台，以下只演示示范代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var trackParam = &#123;&quot;sub1&quot;:&quot;qaq&quot;, &quot;sub2&quot;: &quot;wow&quot;, &quot;sub3&quot;: &quot;qwq&quot;&#125;</span><br><span class="line"></span><br><span class="line">var i = 0;</span><br><span class="line">for (var key in trackParam) &#123;</span><br><span class="line">    // 遍历给trackParam input赋值</span><br><span class="line">    $(&quot;.trackKey&quot;).eq(i).val(key);</span><br><span class="line">    $(&quot;.trackValue&quot;).eq(i).val(trackParam[key]);</span><br><span class="line">    i = i + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，如果你只是单纯想为某个下拉框赋值，我们可以这样写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 第4个trackKey</span><br><span class="line">$(&#x27;.trackKey&#x27;).eq(4);</span><br><span class="line">// 倒数第二个trackKey</span><br><span class="line">$(&#x27;.trackKey&#x27;).eq(-2);</span><br><span class="line">// 最后一个trackKey</span><br><span class="line">$(&#x27;.trackKey&#x27;).last();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次Mongdb动态切换库查询</title>
    <url>/2020/12/01/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mongdb%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="记录一次Mongdb动态切换库查询"><a href="#记录一次Mongdb动态切换库查询" class="headerlink" title="记录一次Mongdb动态切换库查询"></a>记录一次Mongdb动态切换库查询</h1><p>最近因为mongdb从单库改成随日期递增的多库，所以现在需要将原本单个数据源改为根据每天日期动态读库。</p>
<p>原版本是采用MongodbTemplate读取properties配置文件中mongo相关配置，网上找了不下20篇博文，却没有一篇有清晰解释的。</p>
<p>业务：ip超过三次发送邮件</p>
<p>mongo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原聚合查询是这样的 </span></span><br><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span><br><span class="line"><span class="comment">// where匹配查询条件：affid, offerid,sourceid。</span></span><br><span class="line">Aggregation.match(</span><br><span class="line">    Criteria.where(<span class="string">&quot;aff_id&quot;</span>).is(affId.toString())</span><br><span class="line">            .and(<span class="string">&quot;offer_id&quot;</span>).is(offerId.toString())</span><br><span class="line">            .and(<span class="string">&quot;source_id&quot;</span>).is(originSourceId)),</span><br><span class="line"><span class="comment">// 通过ip进行分组，查询超过3条记录的ip</span></span><br><span class="line">Aggregation.group(<span class="string">&quot;ip&quot;</span>).count().as(<span class="string">&quot;ipCount&quot;</span>), Aggregation.match(Criteria.where(<span class="string">&quot;ipCount&quot;</span>).gt(<span class="number">3</span>)));</span><br><span class="line">AggregationResults&lt;Map&gt; ans = mongoTemplate.aggregate(aggregation, collectionName, Map.class);</span><br></pre></td></tr></table></figure>

<p>使用原生API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接mongo</span></span><br><span class="line">MongoClient mongoClient = MongoClients.create(<span class="string">&quot;mongodb://localhost:27017&quot;</span>);</span><br><span class="line">String dateBaseName = prefix_database + DateUtils.formatDate(DateUtils.yyyyMMdd);</span><br><span class="line"><span class="comment">// 获取集合</span></span><br><span class="line">MongoCollection&lt;Document&gt; doc = database.getCollection(collectionName);</span><br><span class="line"><span class="comment">// match mongo筛选条件,匹配对应source_id, aff_id, offer_id的记录</span></span><br><span class="line">Document subMatch = <span class="keyword">new</span> Document();</span><br><span class="line">subMatch.put(<span class="string">&quot;offer_id&quot;</span>, offerId.toString());</span><br><span class="line">subMatch.put(<span class="string">&quot;aff_id&quot;</span>, affId.toString());</span><br><span class="line">subMatch.put(<span class="string">&quot;source_id&quot;</span>, originSourceId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// group 根据ip进行分组</span></span><br><span class="line">Document subGroup = <span class="keyword">new</span> Document();</span><br><span class="line">subGroup.put(<span class="string">&quot;_id&quot;</span>, <span class="string">&quot;$ip&quot;</span>); </span><br><span class="line"><span class="comment">// 这里必须_id ：强制必须存在。可以为 null。</span></span><br><span class="line"><span class="comment">// 其余的计算字段是可选的，并使用&lt;accumulator&gt;运算符计算。具体的使用，通过下面的代码说明：</span></span><br><span class="line">subGroup.put(<span class="string">&quot;ipCount&quot;</span>, <span class="keyword">new</span> Document(<span class="string">&quot;$sum&quot;</span>, <span class="number">1</span>));</span><br><span class="line">Document match = <span class="keyword">new</span> Document(<span class="string">&quot;$match&quot;</span>, subMatch);</span><br><span class="line">Document group = <span class="keyword">new</span> Document(<span class="string">&quot;$group&quot;</span>, subGroup);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对分组后结果筛选超过3次的IP</span></span><br><span class="line">Document matchGroup = <span class="keyword">new</span> Document(<span class="string">&quot;$match&quot;</span>, <span class="keyword">new</span> Document(<span class="string">&quot;ipCount&quot;</span>,<span class="keyword">new</span> Document(<span class="string">&quot;$gt&quot;</span>, <span class="number">3</span>)));</span><br><span class="line">List&lt;Document&gt; aggregateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">aggregateList.add(match);</span><br><span class="line">aggregateList.add(group);</span><br><span class="line">aggregateList.add(matchGroup);</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line">AggregateIterable&lt;Document&gt; resultSet = doc.aggregate(aggregateList);</span><br><span class="line"><span class="comment">// 遍历结果</span></span><br><span class="line">Iterator&lt;Document&gt; iterator = resultSet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">      Document map = iterator.next();</span><br><span class="line">      String ip = (String) map.get(<span class="string">&quot;_id&quot;</span>);</span><br><span class="line">      ips.add(ip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Console:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印结果</span><br><span class="line">[107.150.126.148]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次搭建个人博客</title>
    <url>/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>前言：</strong></p>
<p>​    之前一直想搭建一个人博客，奈何一直没有时间；最近工作任务较轻松，决定搭建个人博客来记录生活点点滴滴和工作难题。</p>
<p>​    搭建个人博客方式有很多种，这里我是用<a href="https://hexo.io/zh-cn/docs">Hexo</a>+ Github来搭建博客的。</p>
<a id="more"></a>
<p><strong><em>主要流程：</em></strong></p>
<ol>
<li>搭建Node.js环境</li>
<li>搭建git环境</li>
<li>Github的注册和配置</li>
<li>安装配置Hexo</li>
<li>关联Hexo和GihubPages</li>
<li>GitHub Pages 地址解析到个人域名</li>
<li>Hexo 的常用操作</li>
</ol>
<h3 id="搭建Node-js环境"><a href="#搭建Node-js环境" class="headerlink" title="搭建Node.js环境"></a>搭建Node.js环境</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p>
<p>在Node官网下载<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>，安装。</p>
<h3 id="搭建git环境"><a href="#搭建git环境" class="headerlink" title="搭建git环境"></a>搭建git环境</h3><p>git是一款优秀的版本库管理工具，在 Git 官网：<a href="https://link.jianshu.com/?t=https://git-scm.com/">https://git-scm.com/</a> 下载安装。</p>
<h4 id="GitHub-注册和配置"><a href="#GitHub-注册和配置" class="headerlink" title="GitHub 注册和配置"></a>GitHub 注册和配置</h4><p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub，这里主要是通过Git将Hexo与Github相关联，通过Github自带的域名进行访问。</p>
<p>Github注册：<a href="https://link.jianshu.com/?t=https://github.com/">https://github.com/</a></p>
<p>1.新建一个private仓库</p>
<p>新建一个名为<code>你的用户名.github.io</code>，<em>注意：这里仓库名必须为该格式，否则无法正常访问</em>；</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118183453157.png" alt="image-20201118183453157"></p>
<p>2.设置域名访问：打开仓库设置找到<code>Github Pages</code></p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118183748517.png" alt="image-20201118183748517"></p>
<p>访问<a href="https://codingboypeng.github.io/">https://codingboypeng.github.io/</a>，如出现<code>codingboypeng.github.io/</code>证明配置成功。(注意这里需要换成你的域名地址)</p>
<h3 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h3><p><strong>使用 npm 安装 Hexo</strong>：在命令行中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>我们可以使用<code>hexo version</code>查看hexo版本，如出现如下图所示，则证明Hexo安装成功。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118185144748.png" alt="image-20201118185144748"></p>
<p>当然如果不了解hexo常用命令我们可以输入<code>hexo</code>将会提示，如下图：</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118184918362.png" alt="image-20201118184918362"></p>
<p>当安装完成后我们使用<a href="https://vscode.en.softonic.com/">VS Code</a>打开该项目，hexo目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy         #需要部署的文件</span><br><span class="line">├── node_modules    #Hexo插件</span><br><span class="line">├── public          #生成的静态网页文件</span><br><span class="line">├── scaffolds       #模板</span><br><span class="line">├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">| ├── _drafts       #草稿</span><br><span class="line">| └── _posts        #文章</span><br><span class="line">├── themes          #主题</span><br><span class="line">├── _config.yml     #全局配置文件</span><br><span class="line">└── package.json    #npm 依赖等</span><br></pre></td></tr></table></figure>

<p>使用<code>hexo server</code>运行本地项目，访问<a href="https://localhost:4000/">https://localhost:4000</a>，出现如下界面说明运行成功。当然这只是本地运行，别人是看不见的，所以接下来需要将<code>hexo</code>部署到github。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118190049202.png" alt="image-20201118190049202"></p>
<h3 id="关联Hexo和GihubPages"><a href="#关联Hexo和GihubPages" class="headerlink" title="关联Hexo和GihubPages"></a>关联Hexo和GihubPages</h3><p>通过git生成一个ssh key，将ssh key加入到对应项目中以此建立关联。（如果你已存在ssh key，可以在C:\Users\用户名\.ssh\id_rsa.pub中）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>在github新建的youname.github.io添加一个ssh key，将生成的ssh key保存到该仓库中；点开用户<code>settings</code>找到<code>SSH and GPG keys</code>将复制过来的ssh key粘贴到文本框中。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201120173436729.png" alt="image-20201120173436729"></p>
<p>配置git邮箱密码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;1206226332@qq.com&quot;</span></span><br><span class="line">git config --global user.password <span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>

<p>修改Hexo的<code>_config.yml</code>的<code>deploy</code>节点，替换成你的仓库地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:CodingBoyPeng/codingboypeng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>本地文件提交到git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除旧的 public 文件</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成新的 public 文件</span><br><span class="line">hexo generate</span><br><span class="line">或者</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开始部署</span><br><span class="line">hexo deploye</span><br><span class="line">或者</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这时可以通过访问<a href="https://codingboypeng.github.io/">https://codingboypeng.github.io</a>，可以看到你的个人博客啦</p>
<p>最后，感谢博主<a href="https://www.jianshu.com/p/39562a0d8eb6">BXM</a>，也就是我的实习同事；哈哈哈， 世界真的很小！！！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2021/01/24/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<p>package com.pf.springboot.test;</p>
<p>import com.pf.springboot.entity.Company;<br>import com.pf.springboot.entity.ObjectDetail;<br>import com.pf.springboot.entity.People;</p>
<p>import java.lang.reflect.Constructor;<br>import java.lang.reflect.Field;<br>import java.lang.reflect.InvocationTargetException;<br>import java.lang.reflect.Method;<br>import java.lang.reflect.Modifier;<br>import java.math.BigDecimal;<br>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.Date;<br>import java.util.List;<br>import java.util.stream.Collectors;</p>
<p>/**</p>
<ul>
<li>@description:</li>
<li>@author:Peng</li>
<li>@Date:2021/1/15</li>
<li>/<br>public class ReflectTest {<br>  // java 反射 api<br>  public static void main(String[] args) {<pre><code>  Company company = new Company(1,&quot;黄小龙&quot;, 50, new Date(), BigDecimal.ONE);
  List&lt;?&gt; list = getClassField(company);
  // 对象拥有的属性
  // System.out.println(list.toString());
  // 对象所有方法
  // echoAllMethods(people);
  // 反射执行指定方法
  invokeMethod(company, &quot;echoCompanyDetail&quot;);</code></pre>
  }</li>
</ul>
<pre><code>/**
 *
 * 利用反射获取所传的类属性列表（包括私有、共有等）
 * @param obj 任意对象
 * @param &lt;?&gt; 泛型对象
 * @return
 */
private static List&lt;?&gt; getClassField(Object obj) &#123;
    // 获取
    Class&lt;?&gt; clazz = obj.getClass();
    // 所有属性
    Field[] fields = clazz.getDeclaredFields();

    List&lt;String&gt; list = new ArrayList&lt;&gt;();
    Arrays.stream(fields).forEach(field -&gt; &#123;
        // 设置是否允许访问
        field.setAccessible(true);
        String fieldStr = null;
        try &#123;
            fieldStr = &quot;属性: &quot; +
                    field.getName() +
                    &quot; = &quot; +
                    field.get(obj) +
                    &quot;, 访问修饰符: &quot; +
                    Modifier.toString(field.getModifiers()) +
                    &quot;, 参数类型: &quot; +
                    field.getType();
        &#125; catch (IllegalAccessException e) &#123;
            e.printStackTrace();
        &#125;
        list.add(fieldStr + &quot;\n&quot;);
    &#125;);
    return list;
&#125;;


/**
 * 打印所拿到反射类中的所有公有，私有，保护，默认方法；但不包括父类的方法
 * @param obj
 */
public static void echoAllMethods(Object obj) &#123;
    Class&lt;?&gt; clazz = obj.getClass();
    // 拿到反射类中所有的公有方法（包括父类）
    // Method[] methods = clazz.getMethods();
    //  拿到反射类中的所有公有，私有，保护，默认方法；但不包括父类的方法
    Method[] methods = clazz.getDeclaredMethods();
    for (Method method : methods) &#123;
        String name = method.getName();
        System.out.println(name);
    &#125;
&#125;


/**
 * 通过反射 invoke方法
 * @param obj
 */
public static void invokeMethod(Object obj, String methodName) &#123;
    Class&lt;?&gt; clazz = obj.getClass();
    try &#123;
        Method method = clazz.getMethod(methodName, String.class, Integer.class, Date.class, BigDecimal.class);
        String result = (String) method.invoke(obj, &quot;李天刚&quot;, 1, new Date(), BigDecimal.valueOf(3));
        System.out.println(result);
    &#125; catch (NoSuchMethodException e) &#123;
        System.out.println(&quot;在当前类中没有找到找到指定方法: &quot; + methodName);
    &#125; catch (IllegalAccessException | InvocationTargetException e) &#123;
        e.printStackTrace();
    &#125;
&#125;</code></pre>
<p>}</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
