<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021年个人计划</title>
    <url>/2021/03/01/2021%E5%B9%B4%E4%B8%AA%E4%BA%BA%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<p>20210302/yekqgh163654.png</p>
<h3 id="2021年个人计划"><a href="#2021年个人计划" class="headerlink" title="2021年个人计划"></a>2021年个人计划</h3><p>虽然2021年已经过去3个月，没有第一时间做出2021的个人计划，只因当时自己没有好好规划自己目标。我相信现在做规划还是来得及的。</p>
<p>以下是我2021年的计划清单：</p>
<h3 id="生活类"><a href="#生活类" class="headerlink" title="生活类"></a>生活类</h3><p>1.每天坐50个深蹲</p>
<p>2.每月陪女朋友看一场电影</p>
<p>3.对当月进行一次个人汇总总结，对人生观一个正向反馈</p>
<p>4.每月尝试一道新菜。</p>
<p>5.带女朋友去一次杭州。</p>
<p>6.每个月增重3斤</p>
<p>7.控制游戏时间，每个星期游戏时间控制在2h以内</p>
<h3 id="知识类"><a href="#知识类" class="headerlink" title="知识类"></a>知识类</h3><p>1.每月看4本书(1本技术类，3本杂书)，吸收不同维度的知识</p>
<p>2.每天看10分钟新闻</p>
<p>3.每天背40个单词</p>
<h3 id="理财类"><a href="#理财类" class="headerlink" title="理财类"></a>理财类</h3><p>将每月工资的【1/4】存入银行卡，作为固定积蓄；300作为地铁费用；3.5k作为生活住宿支出；500用来购物；</p>
<p>剩下的钱则是购买基金。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人计划</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS手动更新gcc</title>
    <url>/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/</url>
    <content><![CDATA[<h1 id="CentOS手动更新gcc"><a href="#CentOS手动更新gcc" class="headerlink" title="CentOS手动更新gcc"></a>CentOS手动更新gcc</h1><p>不久前在阿里云服务买了台服务器，急忙的装了jdk，mysql……</p>
<p>步入正题，<code>centos7</code>默认的gcc版本是<code>4.8</code>，<code>仅支持c++11</code>，更高版本需要自行手动升级，所以想给它升级一下。。。哪想会有这么多坑！！！</p>
<a id="more"></a>
<p><img src="/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/image-20210105141953681.png" alt="image-20210105141953681"></p>
<h4 id="1-手动升级，需要去下载对应的tar包，放到linux环境中进行解压"><a href="#1-手动升级，需要去下载对应的tar包，放到linux环境中进行解压" class="headerlink" title="1.手动升级，需要去下载对应的tar包，放到linux环境中进行解压"></a>1.手动升级，需要去下载对应的tar包，放到linux环境中进行解压</h4><p>可以在<a href="https://ftp.gnu.org/gnu/gcc/">gcc版本库</a>中下载所需版本，这里我下载的是9.2版本，下载完成后放到服务器上解压。</p>
<p><img src="/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/image-20210105142725271.png" alt="image-20210105142725271"></p>
<h4 id="2-我们cd-gcc-9-2-0目录下-此时还不能直接安装，-linux在安装包时会有检验包依赖的过程，安装gcc需要3个包，分别是gmp-mpfr-mpc"><a href="#2-我们cd-gcc-9-2-0目录下-此时还不能直接安装，-linux在安装包时会有检验包依赖的过程，安装gcc需要3个包，分别是gmp-mpfr-mpc" class="headerlink" title="2.我们cd gcc-9.2.0目录下,  此时还不能直接安装， linux在安装包时会有检验包依赖的过程，安装gcc需要3个包，分别是gmp, mpfr, mpc"></a>2.我们<code>cd gcc-9.2.0</code>目录下,  此时还不能直接安装， linux在安装包时会有检验包依赖的过程，安装<code>gcc</code>需要3个包，分别是<code>gmp, mpfr, mpc</code></h4><p>同样，这三个包可自动下载，也可手动下载。</p>
<p><em>手动下载地址</em>： <a href="http://ftp.gnu.org/pub/gnu/gmp/">gmp</a>，<a href="https://www.mpfr.org/history.html">mpfr</a>，<a href="http://ftp.gnu.org/gnu/mpc/">mpc</a></p>
<p><code>(如果是手动下载，需要对下载后的包进行解压，然后cd到对应目录下安装编译 ./configure --prefix=/软件安装路径,make &amp;&amp; make install)</code></p>
<p><em>自动安装：</em>相对于手动安装简单许多，在gcc目录下执行<code>./contrib/download_prerequisites</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;contrib&#x2F;download_prerequisites</span><br><span class="line">&#x2F;&#x2F; 这条命令的意思就是下载上面3个包文件</span><br></pre></td></tr></table></figure>

<p>控制台出现<code>All prerequisites downloaded successfully</code>，证明三个包文件下载成功</p>
<h4 id="3-生成Makefile文件"><a href="#3-生成Makefile文件" class="headerlink" title="3.生成Makefile文件"></a>3.生成Makefile文件</h4><p>在gcc安装目录下创建一个<code>gcc-build</code>文件，用于存放<code>gcc编译文件</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost gcc-9.2.0]# mkdir gcc-build-9.3.0 </span><br><span class="line">[root@localhost gcc-9.2.0]# cd gcc-build-9.3.0  &#x2F;&#x2F; cd到gcc-build目录下</span><br><span class="line">[root@localhost gcc-9.2.0]# ..&#x2F;configure --enable-checking&#x3D;release --enable-languages&#x3D;c,c++ --disable-multilib  </span><br><span class="line">&#x2F;&#x2F; 表示gcc支持哪些语言</span><br></pre></td></tr></table></figure>

<h4 id="4-编译make"><a href="#4-编译make" class="headerlink" title="4.编译make"></a>4.编译make</h4><p>这里是最重…要的一步！这一步差不多消耗<code>3-4小时</code>进行编译，请你预安排好执行。</p>
<p><em>可以使用多个线程进行处理，但请先了解当前处理器的配置，避免安装失败</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost gcc-build-9.3.0]# make [-j4] 　&#x2F;&#x2F;表示启动四个线程来编译gcc，[]表示可省略</span><br></pre></td></tr></table></figure>

<h4 id="5-安装、查看gcc版本"><a href="#5-安装、查看gcc版本" class="headerlink" title="5.安装、查看gcc版本"></a>5.安装、查看gcc版本</h4><p>这一步<code>make install</code>执行安装。安装完成后，使用<code>gcc -v</code>查看gcc版本。</p>
<p><img src="/2021/01/05/CentOS%E6%89%8B%E5%8A%A8%E6%9B%B4%E6%96%B0gcc/image-20210105145847495.png" alt="image-20210105145847495"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gcc</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>DateFormat不要定义成全局！！！</title>
    <url>/2021/01/28/DateFormat%E4%B8%8D%E8%A6%81%E5%AE%9A%E4%B9%89%E6%88%90%E5%85%A8%E5%B1%80%EF%BC%81%EF%BC%81%EF%BC%81/</url>
    <content><![CDATA[<h2 id="1-问题产生原因"><a href="#1-问题产生原因" class="headerlink" title="1.问题产生原因"></a>1.问题产生原因</h2><p>一次项目开发过程中，因为多出需要<code>Format Date</code>鄙人为求<code>捷径</code>, 将<code>DateFormat</code>对象定义成全局的。。。</p>
<a id="more"></a>
<p>如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> DateFormat SIMPLE_DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>结果被老大批了一顿，说<code>多线程情况下是有很大问题</code>， 这就令鄙人很是费解~~~。所以当机立断，决定好好研究一番，免得云里雾里，下次再挨批！有幸一次查阅阿里巴巴开发规范，其中就写着</p>
<p><code>SimpleDateFormat 是线程不安全的类，一般不要定义为 static 变量，如果定义为static，必须加锁，或者使用 DateUtils 工具类</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">因为使用了static就不是为某一实例所持有，而是被所有实例所共享。使用了static修饰的关键字都是放在堆内存当中的。</span><br></pre></td></tr></table></figure>

<p>这里有可能会疑惑，那我不用<code>static</code>修饰的全局变量就一定是安全的吗?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不一定，像你放在service层作为一个全局变量，spring默认是‘单例’的，容器中只会存在一个实例，多线程情况下仍然是有问题的！</span><br></pre></td></tr></table></figure>

<p><code>解决思路: 1.堆内存是被所有实例所共享的，所以只需要将所有实例拥有自己的dateformat就可以了</code></p>
<p>​                  <code>2.只要实现同步，当前线程使用时，其他线程停滞等待，待该线程使用</code></p>
<h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2 解决方案"></a>2 解决方案</h2><h3 id="2-1-ThredLocal"><a href="#2-1-ThredLocal" class="headerlink" title="2.1 ThredLocal"></a>2.1 ThredLocal</h3><p>阿里巴巴开发手册中使用ThreadLocal来解决线程不安全问题，那么<code>ThreadLocal</code>究竟是什么东西？</p>
<p>ThreadLocal是线程内部的一个存储类，可以指定线程内存储数据，数据存储以后，只有指定线程可以得到存储数据。</p>
<p>来看看<code>ThreadLocal源码Doc</code></p>
<p><img src="/2021/01/28/DateFormat%E4%B8%8D%E8%A6%81%E5%AE%9A%E4%B9%89%E6%88%90%E5%85%A8%E5%B1%80%EF%BC%81%EF%BC%81%EF%BC%81/image-20210128202353482.png" alt="image-20210128202353482"></p>
<p>大概的意思就是说：<code>ThreadLocal类就是提供线程内部的一个局部变量，该变量与线程是一一对应的。每个线程都拥有它的内部变量，彼此是相互独立的。</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  	 <span class="comment">// 获取当前线程</span></span><br><span class="line">     Thread t = Thread.currentThread();</span><br><span class="line">     <span class="comment">// 获取map</span></span><br><span class="line">     ThreadLocalMap map = getMap(t);</span><br><span class="line">     <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">          ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">          <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">             T result = (T)e.value;</span><br><span class="line">             <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//getMap方法</span></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//thred中维护了一个ThreadLocalMap</span></span><br><span class="line">      <span class="keyword">return</span> t.threadLocals;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//为每一个线程创建一个ThreadLocalMap</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//实例化一个新的ThreadLocalMap，并赋值给线程的成员变量threadLocals</span></span><br><span class="line">      t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一个线程，ThreadLocal都会创建一个ThreadLocalMap，ThreadLocal维护着这些map，map创建了一个长度为16的table。不管有多少个ThreadLocalMap，只要ThreadLocal是同一个，那么在ThreadLocalMap中的位置也就确定了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ThreadLocalMap构造方法</span></span><br><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line">        <span class="comment">//内部成员数组，INITIAL_CAPACITY值为16的常量</span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[INITIAL_CAPACITY];</span><br><span class="line">        <span class="comment">// 位运算，结果与取模相同，计算出需要存放的位置</span></span><br><span class="line">        <span class="comment">// 同一个threadlocal的hashcode相同</span></span><br><span class="line">        <span class="keyword">int</span> i = firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class="number">1</span>);</span><br><span class="line">        table[i] = <span class="keyword">new</span> Entry(firstKey, firstValue);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        setThreshold(INITIAL_CAPACITY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>阿里开发手册中提出的解决方法</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用threadlocal</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateFormat SIMPLE_DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ConcurrentHashMap&lt;String, SimpleDateFormat&gt;&gt; df =     ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class="line">        ConcurrentHashMap&lt;String, SimpleDateFormat&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;yyyy-mm-dd&quot;</span>, <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMdd&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="2-2-CountDownLatch"><a href="#2-2-CountDownLatch" class="headerlink" title="2.2 CountDownLatch"></a>2.2 CountDownLatch</h3><p>​    CountDownLatch是一个同步工具类，用来协调多个线程之间的同步，或者说起到线程之间的通信（而不是用作互斥的作用）。</p>
<p>CountDownLatch能够使一个线程在等待另外一些线程完成各自工作之后，再继续执行。使用一个计数器进行实现。计数器初始值为线程的数量。当每一个线程完成自己任务后，计数器的值就会减一。当计数器的值为0时，表示所有的线程都已经完成一些任务，然后在CountDownLatch上等待的线程就可以恢复执行接下来的任务。</p>
<p>所以可以使用CountDownLatch来实现同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateFormat SIMPLE_DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">            <span class="string">&quot;yyyyMMdd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">parseDate</span><span class="params">(String value, CountDownLatch latch)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyyMMdd&quot;</span>).parse(value);</span><br><span class="line">        latch.countDown();</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>测试</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">            ExecutionException, ParseException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> availableProcessors = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        ExecutorService exec = Executors.newFixedThreadPool(availableProcessors);</span><br><span class="line">        List&lt;Future&lt;Date&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">final</span> SimpleDateFormatExample sdf = <span class="keyword">new</span> SimpleDateFormatExample();</span><br><span class="line">        Callable&lt;Date&gt; parseDateTask = <span class="keyword">new</span> Callable&lt;Date&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Date <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Date date = sdf.parseDate(<span class="string">&quot;20161118&quot;</span>, latch);</span><br><span class="line">                <span class="keyword">return</span> date;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            results.add(exec.submit(parseDateTask));</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Date&gt; result : results) &#123;</span><br><span class="line">            System.out.println(result.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>结果</code>：</p>
<p><img src="/2021/01/28/DateFormat%E4%B8%8D%E8%A6%81%E5%AE%9A%E4%B9%89%E6%88%90%E5%85%A8%E5%B1%80%EF%BC%81%EF%BC%81%EF%BC%81/image-20210128230607605.png" alt="image-20210128230607605"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装部署mysql踩坑</title>
    <url>/2021/04/15/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="Docker安装部署mysql踩坑"><a href="#Docker安装部署mysql踩坑" class="headerlink" title="Docker安装部署mysql踩坑"></a>Docker安装部署mysql踩坑</h1><p>最近花了一段时间学习Docker，准备自己搭建一个镜像，更深层次的了解一个镜像生成原理。</p>
<p>以前一直都不知道docker为什么会比传统虚拟机更快？镜像和容器之间的关系是什么？经过一周的学习，终于有了一个最基本的概念！</p>
<p><strong>轻量级容器</strong></p>
<p>docker具有<code>分层</code>概念, 所有镜像都会有一个基础镜像Image；一个镜像具有很多层layer; 上层在下层layer基础上只做增量，docker比虚拟机更为轻量级的原因就是因为layer；可以通过<code>docker inspect 镜像名</code>查看当前镜像layer。</p>
<p><img src="/2021/04/15/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E8%B8%A9%E5%9D%91/image-20210412151439814.png" alt="image-20210412151439814"></p>
<p><strong>docker使用大致流程</strong></p>
<ol>
<li><p>使用<code>docker search</code>从<code>docker hub</code>找到我们所需要的镜像。</p>
</li>
<li><p><code>docker pull</code>从<code>docker hub</code>拉取镜像。</p>
</li>
<li><p>镜像下拉后，就可以通过run镜像来生成容器，生成容器时可携带参数来对生成容器进行配置(挂载，环境，端口映射等等)。docker hub中都有容器启动<code>guide</code>，请自行查看。</p>
</li>
<li><p>对容器进行commit，打包成镜像image,  push推送到仓库中。</p>
</li>
</ol>
<p><img src="/2021/04/15/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E8%B8%A9%E5%9D%91/image-20210415163331618.png" alt="image-20210415163331618"></p>
<p><strong>容器和镜像</strong></p>
<p>容器是镜像的实例，当run一个镜像的时候，容器就产生了。run镜像的实质就是为镜像提供一个可写层，可以通过该可写层来自定义配置镜像，构建自己的镜像。</p>
<p><strong>常用命令</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search  镜像</span><br><span class="line">docker pull 镜像名称:版本 #默认下拉latest最新版本</span><br><span class="line">docker run  [--name 容器名称] [-it 分配一个伪终端] [-p 映射端口] [-v 挂载数据卷] ImageId [容器启动后执行的命令]</span><br><span class="line">docker exec 容器ID&#x2F;容器名  &#x2F;bin&#x2F;bash    # 以命令行形式执行容器</span><br><span class="line">docker attach  进入容器内部</span><br><span class="line">docker commit 容器名 镜像名:版本</span><br><span class="line">docker build [-t 指定生成镜像名] [-f 指定dockerfile文件路径和文件名] . #默认会将当前目录下名为Dockerfile的文件</span><br><span class="line">docker inspect 镜像名  # 查看镜像详细信息</span><br><span class="line">docker rmi [-f 强制] 镜像</span><br><span class="line">docker rm [-f 强制] 容器</span><br><span class="line">docker contain prune #删除全部无用容器</span><br></pre></td></tr></table></figure>

<p><strong>Dockerfile</strong></p>
<p>这里只简单介绍dockerfile常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 所有镜像都拥有一个基础镜像；当我们用dockerfile构建镜像时，可以原有镜像上添加一些工具插件以及自定义配置</span><br><span class="line">FROM   基础镜像</span><br><span class="line"># 维护者信息</span><br><span class="line">MAINTAINER 个人签名</span><br><span class="line"># 镜像标签， 键值对 key&#x3D;value  可以打多个标签</span><br><span class="line">Label  version&#x3D;&quot;test:0.1&quot;</span><br><span class="line"># 制作镜像中需要用到的命令（安装服务，工具和配置）</span><br><span class="line"># 这里注意 dockerfile中run一次就会产生一个新的镜像；所以当多条run命令时，当前命令总在最新镜像执行；建议使用RUN 命令1 $$ # 命令2 连接</span><br><span class="line">RUN  yum -y install yim  或 RUN [&quot;yum&quot;, &quot;istall&quot;, &quot;nginx&quot;]</span><br><span class="line"># 容器启动执行的初始命令， 这里是启动后执行&#x2F;bin&#x2F;bash； 注意：容易被覆盖</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br><span class="line">#  EXPOSE 宿主机端口:容器内部端口 暴露端口 </span><br><span class="line"># ENV 设置容器内环境变量</span><br><span class="line">ENV MYSQL_PASSWORD 123456</span><br><span class="line">#  ADD 将dockerfile当前目录下的文件或目录拷贝镜像（压缩包会自动解压）</span><br><span class="line"># COPY docker file当前目录下的文件拷贝到镜像中</span><br><span class="line"># ENTRYPOINT    容器启动的时候执行的初始命令，不能被替换 </span><br><span class="line">ENTRYPOINT [ &quot;&#x2F;bin&#x2F;bash&quot;,&quot;-c&quot;,&quot;&#x2F;start.sh&quot; ]</span><br><span class="line"># VOLUME 挂载数据卷</span><br></pre></td></tr></table></figure>



<p><strong>部署Mysql踩坑</strong></p>
<p>在部署Mysql后，想通过云服务器连接容器mysql，测试是否部署成功。却发现怎么也链接不进去，而使用navicat工具却链接成功了。</p>
<p><img src="/2021/04/15/Docker%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2mysql%E8%B8%A9%E5%9D%91/image-20210412152149608.png" alt="image-20210412152149608"></p>
<p>仔细检查密码，ip端口，阿里云安全组，发现都没有问题，</p>
<p>最后发现是<code>容器版本和服务器mysql客户端版本不一致</code>导致的。当前服务器版本是5.7， 而容器Mysql却是8.0版本的，所以将mysql客户端更新到8.0就可以了</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器通信</title>
    <url>/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="Docker容器通信"><a href="#Docker容器通信" class="headerlink" title="Docker容器通信"></a>Docker容器通信</h1><p>一直以来想用Docker搭建一个RocketMQ集群，但是由于一直没有对docker进行深入了解，无法知道容器之间是如何通信，导致该想法止步于此。</p>
<p>想知道容器之间通信，那就应该先了解docker网络。</p>
<a id="more"></a>
<p>安装docker时，会自动在host上创建3个网络：host, network和bridge；执行<code>ip addr</code>，可以发现多了一块docker0虚拟网卡（稍后为你解释docker0的作用）</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210416144755032.png" alt="image-20210416144755032"></p>
<p>准备容器，这里以redis为例<code>docker pull redis</code></p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210416145428843.png" alt="image-20210416145428843"></p>
<p>首先<code>docker run  --name  redis01  redis    apt-get install -y iputils-ping</code>创建一个名为<code>redis01</code>容器。</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210416154803175.png" alt="image-20210416154803175"></p>
<p><code>docker inspect redis01</code>查看容器内部详细信息。可以看见容器使用的是bridge网络模式。</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210416161551657.png" alt="image-20210416161551657"></p>
<p>当docker进程启动时，就会默认生成3个网络，使用<code>docker network  ls</code>列出docker已存在的网络，如下图所示</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210417213304645.png" alt="image-20210417213304645"></p>
<p>bridge模式下，每当docker生成一个容器，docker将会创建一对<code>veth pair</code>虚拟网卡，一段在宿主机中，叫做veth， 另一端存在于新建的容器中，名为<code>eth0</code>。容器就可以通过eth0来连接宿主机和其他容器。</p>
<p>创建redis01容器后，宿主机执行<code>ip addr</code>，就可以看见新增具有唯一识别的veth。</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210417214218596.png" alt="image-20210417214218596"></p>
<p>docker共有4种网络模式，这里只做简单介绍。Network namespace顾名思义，就是docker网络中的命名空间，docker是以命名空间来控制不同容器之间通信的。不同namespace的容器是无法进行通信的(当然也可以做到容器互联)。</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210416233941905.png" alt="image-20210416233941905"></p>
<p>如果没有指定网络模式，那么容器和宿主机则是互通 的。那么容器与容器是如何互联的呢？</p>
<p>使用<code>docker run  --name  redis02  redis    apt-get install -y iputils-ping</code>，再查看分配redis02容器的ip</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210417220957415.png" alt="image-20210417220957415"></p>
<p>尝试将两容器互ping</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210417221520012.png" alt="image-20210417221520012"></p>
<p>结果：以上是由于我们容器都使用了默认参数-net bridge，namespace都是相同的，所以redis02, redis01网络是互通的。但容器之间网络并不是直连的，而是通过eth0经过宿主机网桥转发到目标容器。</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210417223526642.png" alt="image-20210417223526642"></p>
<p><strong>创建自定义网络</strong></p>
<p><code>docker network create --driver bridge --subnet 192.168.0.0/16  --gateway 192.168.0.1 redis</code></p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210419120115793.png" alt="image-20210419120115793"></p>
<p>创建指定网络容器</p>
<p><code>docker run -it  -d --name redis-net-01  --network=redis   redis</code></p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210419121055233.png" alt="image-20210419121055233"></p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210419121151790.png" alt="image-20210419121151790"></p>
<p>宿主机使用<code>ip addr</code>，发现多了一块网卡</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210419122346820.png" alt="image-20210419122346820"></p>
<p>再创建一个相同网络的容器，名为<code>redis-net-02</code></p>
<p><code>docker run -it  -d --name redis-net-02  --network=redis   redis</code></p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210419121506682.png" alt="image-20210419121506682"></p>
<p>测试redis-net-02与redis-net-01网络联通</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210419122125701.png" alt="image-20210419122125701"></p>
<p>当然，使用自定义网络的容器是可以使用容器名的</p>
<p><img src="/2021/04/19/Docker%E5%AE%B9%E5%99%A8%E9%80%9A%E4%BF%A1/image-20210419122508412.png" alt="image-20210419122508412"></p>
<p>使用自定义网络的好处</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">很好的做到容器之间网络隔离</span><br><span class="line">使用自定义网络 ping 容器的 ip 地址和名称都能 ping 通</span><br><span class="line">不同集群可以采用不同的网络，避免的网络的复杂性，保证集群健康和安全</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建redis集群</title>
    <url>/2021/04/23/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h1 id="Docker搭建redis集群"><a href="#Docker搭建redis集群" class="headerlink" title="Docker搭建redis集群"></a>Docker搭建redis集群</h1><p>创建一个自定义redis网络</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.168.0.0&#x2F;16  --gateway 192.168.0.1 redis</span><br></pre></td></tr></table></figure>

<p>创建shell脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> $(seq 1 6)  seq代表循环1-6之间的整数, 这里循环6次</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> EOF 自定义终止符（也可以使用自定义终止符）, 配合cat命令达到对文件的多行追加、覆盖</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;&lt; 输入重定向，  &gt;：输出重定向（覆盖）  &gt;&gt;: 输出重定向（追加）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分别生成192.168.0.11, 192.168.0.12, 192.168.0.13, 192.168.0.14, 192.168.0.15, 192.168.0.6</span></span><br><span class="line">for port in $(seq 1 6);</span><br><span class="line">do</span><br><span class="line">mkdir -p   redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch   redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt; redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 192.168.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done </span><br></pre></td></tr></table></figure>

<p>将以上脚本复制到终端中运行</p>
<p><img src="/2021/04/23/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/image-20210422160500047.png" alt="image-20210422160500047"></p>
<p>随后启动redis容器</p>
<p>node-1节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;节点1</span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis01 \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-1&#x2F;data:&#x2F;data \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-1&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \</span><br><span class="line"> -d --net redis --ip 192.168.0.11  redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/23/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/image-20210422163820267.png" alt="image-20210422163820267"></p>
<p><code>原因是因为防火墙启动或重启的时候， 会从iptables移除规则，导致docker无法正常工作，所以我们重启docker服务久好了</code></p>
<p><img src="/2021/04/23/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/image-20210422164323684.png" alt="image-20210422164323684"></p>
<p>同理，节点2,3,4,5,6也是一样， 这里就不再演示了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 节点2</span><br><span class="line">docker run -p 6372:6379 -p 16372:16379 --name redis02 \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-2&#x2F;data:&#x2F;data \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-2&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \</span><br><span class="line"> -d --net redis --ip 192.168.0.12  redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 节点3</span><br><span class="line">docker run -p 6373:6379 -p 16373:16379 --name redis03 \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-3&#x2F;data:&#x2F;data \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-3&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \</span><br><span class="line"> -d --net redis --ip 192.168.0.13  redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 节点4</span><br><span class="line">docker run -p 6374:6379 -p 16374:16379 --name redis04 \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-4&#x2F;data:&#x2F;data \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-4&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \</span><br><span class="line"> -d --net redis --ip 192.168.0.14  redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 节点5</span><br><span class="line">docker run -p 6375:6379 -p 16375:16379 --name redis05 \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-5&#x2F;data:&#x2F;data \</span><br><span class="line"> -v  &#x2F;root&#x2F;redis&#x2F;node-5&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \</span><br><span class="line"> -d --net redis --ip 192.168.0.15 redis redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="number">6376</span>:<span class="number">6379</span> -p <span class="number">16376</span>:<span class="number">16379</span> --name redis06 \</span><br><span class="line"> -v  /root/redis/node-<span class="number">6</span>/data:/data \</span><br><span class="line"> -v  /root/redis/node-<span class="number">6</span>/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line"> -d --net redis --ip <span class="number">192.168</span>.<span class="number">0.16</span>  redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p>至此6个节点容器已经创建好了，接下来就是搭建redis集群了</p>
<p><img src="/2021/04/23/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/image-20210422173501229.png" alt="image-20210422173501229"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 以交互方式执行redis01容器</span><br><span class="line">docker exec -it  redis01 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>

<p><strong>创建Redis集群</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  --cluster-replicas  主&#x2F;从以1：1比例搭建集群</span><br><span class="line">redis-cli  --cluster create  192.168.0.11:6379  192.168.0.12:6379  192.168.0.13:6379  192.168.0.14:6379  192.168.0.15:6379  192.168.0.16:6379  --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/23/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/image-20210423155258763.png" alt="image-20210423155258763"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这里一定要以集群方式启动，否则会出现set key失败</span><br><span class="line">redis-cli -c # -c 表示启动集群模式</span><br><span class="line">cluster  info # 查看集群配置</span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/23/Docker%E6%90%AD%E5%BB%BAredis%E9%9B%86%E7%BE%A4/image-20210423155953538.png" alt="image-20210423155953538"></p>
<p>在当前redis01容器，set一个值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示ok，成功添加一条数据</span><br><span class="line">127.0.0.1:6379&gt; set peng 18</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>进入其他redis节点查看该key是否存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@codingboypeng ~]# docker exec -it redis04 &#x2F;bin&#x2F;bash</span><br><span class="line">root@a1eb72f5569e:&#x2F;data# redis-c </span><br><span class="line">redis-check-aof  redis-check-rdb  redis-cli        </span><br><span class="line">root@a1eb72f5569e:&#x2F;data# redis-cli -c </span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; get peng</span><br><span class="line">-&gt; Redirected to slot [1674] located at 192.168.0.11:6379</span><br><span class="line">&quot;18&quot;</span><br><span class="line">192.168.0.11:6379&gt; </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>运维</category>
        <category>docker</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>docker网络</tag>
        <tag>集群</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins用户权限管理</title>
    <url>/2021/03/01/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>Jenkins需要用<code>Role-based Authorization Strategy</code> 插件来实现对不同用户的访问控制。</p>
<h3 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1.下载插件"></a>1.下载插件</h3><p>点jenkins的插件管理，下载<code>Role-based Authorization Strategy</code></p>
<h3 id="2-安全配置"><a href="#2-安全配置" class="headerlink" title="2.安全配置"></a>2.安全配置</h3><p>下载插件后，重启jenkins，找到全局安全设置，配置安全访问策略</p>
<p><img src="/2021/03/01/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20210301160728310.png" alt="image-20210301160728310"></p>
<p>1）管理角色</p>
<p>系统配置找到<code>Manage and assign Roles</code>实现对不同角色权限控制。</p>
<p><img src="/2021/03/01/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20210301160932429.png" alt="image-20210301160932429"></p>
<p>2）分配角色</p>
<p><img src="/2021/03/01/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20210301161125085.png" alt="image-20210301161125085"></p>
<p>3.查看用户权限是否配置成功</p>
<p>登录hewu用户，只能看见test项目，证明权限配置成功。</p>
<p><img src="/2021/03/01/Jenkins%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/image-20210301161222741.png" alt="image-20210301161222741"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>角色权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins踩坑日记</title>
    <url>/2021/02/25/Jenkins%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p>在jenkins使用<code>Publish over SSH</code>插件时，可谓时踩到了一个不小的坑，记录一下。。。</p>
<p>1.首先，在服务器上使用<code>ssh-keygen</code>生成一对密钥对。</p>
<p><img src="/2021/02/25/Jenkins%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/image-20210224235449847.png" alt="image-20210224235449847"></p>
<p>2.通过<code>cat  /root/.ssh/id_rsa文件</code>，将打印内容复制输入到key中。<code>这里一定要带上begin key --- end key, 否则会Can&#39;t connect to server </code></p>
<p><img src="/2021/02/25/Jenkins%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/image-20210224235858659.png" alt="image-20210224235858659"></p>
<p>3.点击<code>Test Configuration</code>，出现<code>success</code>，证明配置成功了。</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven搭建专属私服</title>
    <url>/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[<p>首先明白要什么是maven私服：maven有远程仓库这个概念，我们从远程仓库拉取对应的包，但是maven服务器也在海外，下载效率是特别慢的（虽然可以使用镜像站）。你想不想拥有一个自己的专属库呢？</p>
<p><strong>使用私服的好处</strong>：</p>
<ol>
<li><p>方便单独管理自己内部库</p>
</li>
<li><p>下拉速度比较快</p>
</li>
<li><p>降低中央仓库压力</p>
</li>
<li><p>稳定，易于控制，拓展</p>
</li>
</ol>
<h3 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h3><p>1）安装maven</p>
<p>从<a href="https://maven.apache.org/download.cgi">官网</a>下载tar包后，进行解压添加至环境变量中即可</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210521183358245.png" alt="image-20210521183358245"></p>
<ol start="2">
<li>下载nexus</li>
</ol>
<p>将tar包放到工作目录下进行解压<code>tar -xvf nexus-3.18.1-01-unix.tar.gz</code></p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210521235601434.png" alt="image-20210521235601434"></p>
<ol start="2">
<li>配置环境变量，jdk</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile </span><br><span class="line"><span class="meta">#</span><span class="bash">和NEXUS_HOME</span></span><br><span class="line">export NEXUS_HOME=/usr/local/nexus/nexus-3.18.1-01</span><br><span class="line">export PATH=$NEXUS_HOME/bin;</span><br><span class="line"><span class="meta">#</span><span class="bash">完成以后使更改后的文件立即生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash">检验配置是否成功</span></span><br><span class="line">nexus</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动服务</li>
</ol>
<p><code>./nexus run 就是直接放到主线程里跑</code></p>
<p><code>使用./nexus start 就是后台运行</code></p>
<p>启动时出现了意外</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">There is insufficient memory for the Java Runtime Environment to continue.</span><br><span class="line"># Native memory allocation (mmap) failed to map 945094656 bytes for committing reserved memory.</span><br><span class="line"># An error report file with more information is saved as:</span><br></pre></td></tr></table></figure>

<p>原因：因为内存不足。可以通过修改nexus安装目录下的nexus.vmoptions, 修改完后记得刷新配置</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210522230147696.png" alt="image-20210522230147696"></p>
<p>4)<strong>设置自启服务</strong></p>
<p><code>在/etc/rc.local 文件最底下加入行 nexus start </code></p>
<h3 id="2-Nexus"><a href="#2-Nexus" class="headerlink" title="2.Nexus"></a>2.Nexus</h3><p>默认端口号为：ip:8081，如果有需要可以到<code>/usr/local/nexus/nexus-3.18.1-01/etc/nexus-default.properties</code> ,进行修改端口即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;local&#x2F;nexus&#x2F;nexus-3.18.1-01&#x2F;etc&#x2F;nexus-default.properties</span><br></pre></td></tr></table></figure>

<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210522233112134.png" alt="image-20210522233112134"></p>
<p>1.登录</p>
<p>通过<code>vim /usr/local/nexus/sonatype-work/nexus3/admin.password</code>命令，查看默认密码</p>
<p>2.基本仓库</p>
<ul>
<li>maven-releases (Version policy=Release)默认只允许上传不带SNAPSHOT版本尾缀的包,默认部署策略是Disable redeploy<br>不允许重复上传相同版本号信息的jar,避免包版本更新以后使用方无法获取到最新的包。</li>
<li>maven-snapshots (Versionpolicy=Snapshot)只允许上传带SNAPSHOT版本尾缀的包,默认部署策略是Allow</li>
<li>redeploy,允许重复上传相同版本号信息的jar,每次上传的时候会在jar的版本号上面增加时间后缀信息。 maven-central<br>中央仓库的拷贝,如果环境可以访问中央仓库,则可以获取到相关的包,否则没用</li>
<li>maven-public<br>仓库组,不是实际个一个仓库地址,只是将现有的组合到一次,可以通过它看到所属组内全部仓库的jar信息</li>
</ul>
<p>3）上传nexus</p>
<p>编辑setting.xml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">  	&lt;id&gt;maven-public&lt;&#x2F;id&gt;</span><br><span class="line">  	&lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">  	&lt;password&gt;123456&lt;&#x2F;password&gt;</span><br><span class="line">&lt;&#x2F;server&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">	&lt;id&gt;maven-snapshots&lt;&#x2F;id&gt;</span><br><span class="line">	&lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">	&lt;password&gt;123456&lt;&#x2F;password&gt;</span><br><span class="line">&lt;&#x2F;server&gt;</span><br></pre></td></tr></table></figure>

<p>发布项目的时候使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">	&lt;repository&gt;</span><br><span class="line">   		&lt;id&gt;maven-public&lt;&#x2F;id&gt;</span><br><span class="line">   		&lt;url&gt;http:&#x2F;&#x2F;47.102.214.56:8081&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">	&lt;&#x2F;repository&gt;</span><br><span class="line">	&lt;snapshotRepository&gt;</span><br><span class="line">   		&lt;id&gt;maven-snapshots&lt;&#x2F;id&gt;</span><br><span class="line">   		&lt;url&gt;http:&#x2F;&#x2F;47.102.214.56:8081&#x2F;repository&#x2F;maven-snapshots&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">	&lt;&#x2F;snapshotRepository&gt;</span><br><span class="line">&lt;&#x2F;distributionManagement&gt;</span><br></pre></td></tr></table></figure>

<p>使用<code>maven deloy</code>将jar包发至私服</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523131604363.png" alt="image-20210523131604363"></p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523132002303.png" alt="image-20210523132002303"></p>
<h3 id="3-使用Nexus"><a href="#3-使用Nexus" class="headerlink" title="3.使用Nexus"></a>3.使用Nexus</h3><p>这里我将另外一个项目，打包至私服，那么如何在springboot该项目中引用呢？</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523150850078.png" alt="image-20210523150850078"></p>
<p><strong>第一种: 设置镜像仓库</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--This sends everything else to /public --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>codingboypeng<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://47.102.214.56:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523183250510.png" alt="image-20210523183250510"></p>
<p><strong>第二种: 配置全局pom.xml仓库地址</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">profile</span>&gt;</span>  </span><br><span class="line">	    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">	    <span class="tag">&lt;<span class="name">activation</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">activation</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line">			<span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span>  </span><br><span class="line">		<span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- maven开发库 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://47.102.214.56:8081/repository/maven-public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span> </span><br><span class="line">                 <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">				 <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://47.102.214.56:8081/repository/maven-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span> </span><br><span class="line">                 <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看jar包地址</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523182011707.png" alt="image-20210523182011707"></p>
<p>引用jar包中的类，但是失败了？？？可是引入jar包已经下载下来了啊</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523182205985.png" alt="image-20210523182205985"></p>
<p>后经查阅资料知道是jar包项目pom文件配置有误</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523182424478.png" alt="image-20210523182424478"></p>
<p>配置后，deploy项目，引用最新版本的pom地址， 成功引入</p>
<p><img src="/2021/05/23/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D/Maven%E6%90%AD%E5%BB%BA%E4%B8%93%E5%B1%9E%E7%A7%81%E6%9C%8D%5Cimage-20210523182754636.png" alt="image-20210523182754636"> </p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>私服</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql自动分区</title>
    <url>/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<h1 id="Mysql表分区"><a href="#Mysql表分区" class="headerlink" title="Mysql表分区"></a>Mysql表分区</h1><p>公司的业务报表需要查询到历年数据，  表是以小时为维度统计的导致数据量太大，查询效率太低下。</p>
<p>公司现采用的策略是一个月生成一张表，以<code>hour_data_YYYYMM</code></p>
<p>方式。<a id="more"></a>这种方式会造成修改处过多，工作量太大；所以我们可以将表按月进行分区。</p>
<p>注意：当表中含有主键或唯⼀键时，则每个被⽤作<strong>分区函数的字段必须是表中唯⼀键和主键的全部或⼀部分</strong></p>
<h2 id="分区方式"><a href="#分区方式" class="headerlink" title="分区方式"></a>分区方式</h2><p>mysql分区分为</p>
<ul>
<li><p>RANGE表分区：范围表分区，按照⼀定的<strong>范围值</strong>来确定每个分区包含的数据</p>
</li>
<li><p>LIST表分区：列表表分区，按照⼀个⼀个<strong>确定的值</strong>来确定每个分区包含的数据</p>
</li>
<li><p>HASH表分区：哈希表分区，按照⼀个<strong>⾃定义的函数返回值</strong>来确定每个分区包含的数据</p>
</li>
<li><p>KEY表分区 ：key表分区，与哈希表分区类似，只是⽤MySQL⾃⼰的<strong>HASH函数</strong>来确定每个分区包含的数据</p>
</li>
</ul>
<p>Range表分区</p>
<p>按照一定的返回值来确定每个分区的数据，分区函数的字段必须为整形，分区范围需要连续。符合范围条件的数据将会写入对应的分区。</p>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE employees ( id INT NOT NULL,</span><br><span class="line"> fname VARCHAR(30), lname VARCHAR(30),</span><br><span class="line"> store_id INT NOT NULL </span><br><span class="line"> primary key (&#96;id&#96;, &#96;store_id&#96;)    -- 这里因为有主键字段，分区字段必须是主键和唯一索引的全部或一部分                    </span><br><span class="line"> )</span><br><span class="line"> PARTITION BY RANGE (store_id)</span><br><span class="line"> ( PARTITION p0 VALUES LESS THAN (6), PARTITION p1 VALUES LESS THAN (11),</span><br><span class="line"> PARTITION p2 VALUES LESS THAN (16), PARTITION p3 VALUES LESS THAN (21) );</span><br></pre></td></tr></table></figure>

<p>其他分区可以自行去了解。</p>
<p><code>其中range分区和list分区，若分区字段不在分区范围中会报错</code></p>
<p>mysql不支持自动分区，我们可以使用event事件来定时执行，如果对应分区存在则不创建，反之创建。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;hour_data&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;date_hour&#96; int(11) NOT NULL   COMMENT &#39;int类型的小时时间，就像2018-09-05 11:00:00对应的int类型的数值&#39;,</span><br><span class="line">  &#96;date&#96; int(11) NULL DEFAULT NULL COMMENT &#39;int类型的日期，就是2018-09-05转换成的int类型&#39;,</span><br><span class="line">  &#96;offer_id&#96; int(11) NULL DEFAULT NULL COMMENT &#39;offerID，来自offer表的主键&#39;,</span><br><span class="line">  &#96;aff_id&#96; int(10) NULL DEFAULT NULL COMMENT &#39;下游渠道id&#39;,</span><br><span class="line">  &#96;origin_source_id&#96; varchar(180) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;&#39; COMMENT &#39;下游上报的原始sourceId，默认会考虑把_之前的保留，其他的放弃，否则sourceid会太多&#39;,</span><br><span class="line">  &#96;new_source_id&#96; int(11) NULL DEFAULT 0 COMMENT &#39;加密后的新sourceId，默认为0&#39;,</span><br><span class="line">  &#96;geo&#96; char(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;&#39; COMMENT &#39;geo，aff上报的所在地geo&#39;,</span><br><span class="line">  &#96;event_id&#96; tinyint(4) NULL DEFAULT 1 COMMENT &#39;event_id，来自于offer_event_adv的event_id定义&#39;,</span><br><span class="line">  &#96;impressions&#96; int(11) NULL DEFAULT 0 COMMENT &#39;impressions&#39;,</span><br><span class="line">  &#96;clicks&#96; int(11) NULL DEFAULT 0 COMMENT &#39;点击数，只在install事件时有数据，其他event下都为0&#39;,</span><br><span class="line">  &#96;revenue_num&#96; int(11) NULL DEFAULT 0 COMMENT &#39;我们接收到的数据，比如转化数、注册数&#39;,</span><br><span class="line">  &#96;payout_num&#96; int(11) NULL DEFAULT 0 COMMENT &#39;给下游的数据，比如转化数、注册数&#39;,</span><br><span class="line">  &#96;revenue&#96; decimal(10, 2) NULL DEFAULT 0.00 COMMENT &#39;这个小时我们的收益&#39;,</span><br><span class="line">  &#96;payout&#96; decimal(10, 2) NULL DEFAULT 0.00 COMMENT &#39;这个小时给下游的费用&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;,  &#96;date_hour&#96;) USING BTREE,</span><br><span class="line">  UNIQUE INDEX &#96;unique_offer_date_aff_hour_2&#96;(&#96;offer_id&#96;, &#96;aff_id&#96;, &#96;event_id&#96;, &#96;date_hour&#96;, &#96;origin_source_id&#96;, &#96;new_source_id&#96;, &#96;geo&#96;) USING BTREE,</span><br><span class="line">  INDEX &#96;date_index2&#96;(&#96;date&#96;) USING BTREE,</span><br><span class="line">  INDEX &#96;report_index2&#96;(&#96;date_hour&#96;, &#96;date&#96;, &#96;offer_id&#96;, &#96;aff_id&#96;, &#96;event_id&#96;, &#96;geo&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 102964582 CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci COMMENT &#x3D; &#39;每日每小时sourceid数据表。注意价格是实时变化的，这里需要注意每月一张表&#39; ROW_FORMAT &#x3D; COMPACT</span><br><span class="line">	PARTITION BY RANGE (date_hour)</span><br><span class="line">	(PARTITION p202101 VALUES LESS THAN (1609747898)); -- 表初始化分区</span><br></pre></td></tr></table></figure>
<p>分区建必须包含主键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table hour_data partition by range (date_hour) (</span><br><span class="line">        -- 小于2018-01-01的</span><br><span class="line">        partition p202011 values less than (unix_timestamp(&#39;2020-11-01&#39;)),</span><br><span class="line">        partition p202012 values less than (unix_timestamp(&#39;2020-12-01&#39;)),</span><br><span class="line">        partition p202013 values less than (unix_timestamp(&#39;2021-01-01&#39;)),</span><br><span class="line">        partition p202014 values less than (unix_timestamp(&#39;2021-02-01&#39;)),</span><br><span class="line">        -- 大于2018-04-01的</span><br><span class="line">        partition p2021 values less than maxvalue</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>当前数据量是2000W数据， 查询了分区前查询了20多s都没有出来， 分区后不到1秒就查询出来了<br><img src="/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/image-20210513171400311.png" alt="image-20210513171400311"><br>分区后：<br><img src="/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/image-20210513174518501.png" alt="image-20210513174518501"><br>使用explain查询计划<br><img src="/2021/01/04/Mysql%E8%87%AA%E5%8A%A8%E5%88%86%E5%8C%BA/image-20210513174814238.png" alt="image-20210513174814238"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>XML中的CDATA</title>
    <url>/2021/04/25/XML%E4%B8%AD%E7%9A%84CDATA/</url>
    <content><![CDATA[<p>CDATA是什么，这是XML语法。在CDATA内部的所有内容都会被解析器忽略。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM xxl_job_registry AS t</span><br><span class="line">WHERE t.update_time &lt;![CDATA[ &gt; ]]&gt; DATE_ADD(#&#123;nowTime&#125;,INTERVAL -#&#123;timeout&#125; SECOND)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>类似与</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> xxl_job_registry <span class="keyword">AS</span> t</span><br><span class="line"><span class="keyword">WHERE</span> t.update_time &gt; <span class="keyword">DATE_ADD</span>(<span class="comment">#&#123;nowTime&#125;,INTERVAL -#&#123;timeout&#125; SECOND)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>html中的attr和css区别</title>
    <url>/2020/12/13/html%E4%B8%AD%E7%9A%84attr%E5%92%8Ccss%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>本人再通过jquery给input标签添加visibility属性（保留网页物理空间）</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$.(&quot;#input&quot;).attr(&quot;visibility&quot;, &quot;none&quot;)</span><br></pre></td></tr></table></figure>

<p>并没有生效。最终发现应该调用.css方法，如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$.(&quot;#input&quot;).css(&quot;visibility&quot;, &quot;none&quot;)</span><br></pre></td></tr></table></figure>

<p>原因是style是标签的属性，而visibility是style的子属性，结构如下</p>
<p><img src="/2020/12/13/html%E4%B8%AD%E7%9A%84attr%E5%92%8Ccss%E5%8C%BA%E5%88%AB/image-20201213195806971.png" alt="image-20201213195806971"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins在linux平台上的搭建</title>
    <url>/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="jenkins在linux平台上的搭建"><a href="#jenkins在linux平台上的搭建" class="headerlink" title="jenkins在linux平台上的搭建"></a>jenkins在linux平台上的搭建</h1><p>之前有想过研究jenkins，但是一直没有时间。自己手上又有一台闲置的服务器，想着趁着年前这几天了解了解jenkins。</p>
<p>了解jenkins第一步就是安装和搭建jenkins环境了。</p>
<h3 id="1-Jenkins环境搭建"><a href="#1-Jenkins环境搭建" class="headerlink" title="1.Jenkins环境搭建"></a>1.Jenkins环境搭建</h3><h4 id="1-1-Jenkins介绍"><a href="#1-1-Jenkins介绍" class="headerlink" title="1.1 Jenkins介绍"></a>1.1 Jenkins介绍</h4><p><code>jenkins</code>是一个<code>持续集成</code>平台 ,对现有产品功能不断迭代，使工作流形成一个闭环，产品质量得到高效保证，解决项目不同人员间的沟通效率问题。</p>
<p><code>jenkins的思想</code></p>
<ol>
<li>准备：开发者功能开发完毕，将代码<code>commit</code>至远程仓库。</li>
<li>测试：jenkins对代码仓库<code>commit</code>操作配置了<code>钩子(hook)</code>，对当前代码实施构建，跑测试用例。</li>
<li>合并：自动化测试后， 将当前代码与主干代码进行合并。</li>
<li>部署：项目成功构建后，打成war包，将war包通过ssh上传至生产服务器。</li>
</ol>
<p>了解jenkins平台思想很重要，这对于我们理解和使用Jenkins是十分有利的。</p>
<p>通过以上四点，我们可以联想到jenkins搭建避免不了<code>maven(gradle)</code>,<code> jdk(maven依赖jdk)</code>和<code>git（svn）</code></p>
<h4 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2 安装Git"></a>1.2 安装Git</h4><p><code>Git</code>是一个<code>分布式版本控制器</code>，其他用途就不在这赘述了。本文采用<code>yum</code>安装<code>git</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure>

<h4 id="1-3-安装Jdk"><a href="#1-3-安装Jdk" class="headerlink" title="1.3 安装Jdk"></a>1.3 安装Jdk</h4><p>jenkins最新需要jdk版本8以上，由于官网下载jdk太慢，这是<a href="https://repo.huaweicloud.com/java/jdk/8u151-b12/">镜像地址</a>。）</p>
<p>1). 将下载好的tar包放在linux的服务器下，使用<code>tar -zxvf jdk.1.8.0_161-linux.tar.gz </code>解压。</p>
<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208120205707.png" alt="image-20210208120205707"></p>
<p>2). 解压后，就需要配置好环境变量。</p>
<p><code>vim /etc/profile</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_161  # 换成你安装jdk的路径 </span><br><span class="line">export CLASSPATH=$:CLASSPATH:$JAVA_HOME/lib/</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>source /etc/profile</code>刷新一下配置，使用<code>java -version</code>查看是否配置成功。</li>
</ol>
<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208121931776.png" alt="image-20210208121931776"></p>
<h4 id="1-4-安装Maven"><a href="#1-4-安装Maven" class="headerlink" title="1.4 安装Maven"></a>1.4 安装Maven</h4><p>由于<code>jdk</code>版本采用<code>1.8</code>，<code>maven</code>版本最好是<code>3.3</code>以上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;mirrors.cnnic.cn&#x2F;apache&#x2F;maven&#x2F;maven-3&#x2F;3.6.3&#x2F;binaries&#x2F;apache-maven-3.6.3-bin.tar.gz</span><br></pre></td></tr></table></figure>

<p>如果提示<code>wget commend not found！</code>，那么你需要先通过<code>yum install -y wget</code>。</p>
<p><code>tar -zxvf apache-maven-3.6.3-bin.tar.gz</code>解压完成后，需要配置一下maven的环境变量。将以下配置添加到你的服务器<code>/etc/profile</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 替换成你的安装路径</span></span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208160832581.png" alt="image-20210208160832581"></p>
<h4 id="1-5-安装Jenkins"><a href="#1-5-安装Jenkins" class="headerlink" title="1.5 安装Jenkins"></a>1.5 安装Jenkins</h4><p>安装jenkins方法有很多：</p>
<ol>
<li><p>可以通过官网下载<code>war</code>包，然后将war包放在<code>tomcat</code>的<code>webapp</code>下，就可以了</p>
</li>
<li><p><code>linux</code>可以选择通过<code>yum</code>安装， 跟着<a href="https://pkg.jenkins.io/redhat-stable/">官网</a>的步骤就可以了</p>
</li>
<li><p>直接通过<code>rpm</code>安装 <code>wget https://pkg.jenkins.io/redhat/jenkins-2.156-1.1.noarch.rpm rpm -ivh jenkins-2.156-1.1.noarch.rpm</code></p>
</li>
</ol>
<p>第二种方式，出现了<code>error: https://jenkins-ci.org/redhat/jenkins-ci.org.key: import read failed(-1)</code>, 才疏学浅，实在没有搞明白是什么原因导致的，最后通过第三种方式成功安装了jenkins</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start jenkins</span><br><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure>

<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208180805133.png" alt="image-20210208180805133"></p>
<p>说明Jenkins已经启动成功了，接下来就是配置jenkins了。</p>
<h3 id="2-Jenkins初始化"><a href="#2-Jenkins初始化" class="headerlink" title="2.Jenkins初始化"></a>2.Jenkins初始化</h3><p>启动jenkins后，我们可以通过<a href="http://localhost:8080/">http://localhost:8080</a> 来访问，可以看见页面初始化内容<code>这里端口可以自行设置，默认8080，如果你用的是云服务器，那么还需要配置一下防火墙安全组策略</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</span><br></pre></td></tr></table></figure>

<p>访问页面后，将会要求你输入初始化密码在<code>/var/lib/jenkins/secrets/initialAdminPassword</code></p>
<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208183737457.png" alt="image-20210208183737457"></p>
<h4 id="2-1-插件安装"><a href="#2-1-插件安装" class="headerlink" title="2.1 插件安装"></a>2.1 插件安装</h4><p>这里我们可以先不选择安装插件，因为实在太慢了。。。我们后续可以配置下镜像源。</p>
<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208181952514.png" alt="image-20210208181952514"></p>
<h4 id="2-2-更换镜像源-系统工具插件"><a href="#2-2-更换镜像源-系统工具插件" class="headerlink" title="2.2 更换镜像源, 系统工具插件"></a>2.2 更换镜像源, 系统工具插件</h4><p>插件管理》》》高级设置》》》升级站点， 将以下内容复制到输入框中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;mirror.esuni.jp&#x2F;jenkins&#x2F;updates&#x2F;update-center.json</span><br></pre></td></tr></table></figure>

<p><strong>系统工具所需插件</strong></p>
<p><a href="https://plugins.jenkins.io/maven-plugin">Maven Integration</a>：是jenkins进行持续集成需要的maven插件</p>
<p><a href="https://plugins.jenkins.io/git">Git plugin</a>: 集成git</p>
<p><a href="https://plugins.jenkins.io/github">GitHub plugin</a>：指定拉取github中的仓库地址</p>
<h4 id="2-3-配置系统工具"><a href="#2-3-配置系统工具" class="headerlink" title="2.3 配置系统工具"></a>2.3 配置系统工具</h4><p>在步骤一已经提到了<code>jenkins</code>构建自动化测试所需要的工具，接下来就是配置这些工具》》》系统管理》》》全局工具配置。</p>
<p><strong>jdk配置</strong></p>
<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208224048880.png" alt="image-20210208224048880"></p>
<p><strong>maven配置</strong></p>
<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208224517522.png" alt="image-20210208224517522"></p>
<p><strong>git配置</strong></p>
<p><img src="/2021/02/07/jenkins%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8A%E7%9A%84%E6%90%AD%E5%BB%BA/image-20210208224451299.png" alt="image-20210208224451299"></p>
<p>执行到这一步，<code>jenkins</code>已经搭建好了，接下来就是好好学习jenkins如何构建复杂项目了</p>
]]></content>
      <categories>
        <category>运维</category>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery元素绑定事件失效的原因</title>
    <url>/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>今天开发过程中在给页面初始化设置的适合遇见了绑定事件无效的问题，特此总结下。以往给指定元素绑定事件是因为id或class是经过渲染后的，是动态的，才导致页面<code>定位出错</code>。这次并不是<code>定位出错</code>，而是<code>有效</code>的（我手动在浏览器里执行了）</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 请求ajax，进行页面的intput二级联动</span><br><span class="line">initAdvSourceType(&quot;$&#123;advSourceType&#125;&quot;);</span><br><span class="line">// 给渲染出来标签赋初始值</span><br><span class="line">echoData();</span><br></pre></td></tr></table></figure>

<p>select二级联动<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224234414431.png" alt="image-20201224234414431"><br>给渲染的标签赋值<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224234459006.png" alt="image-20201224234459006"><br>手动执行一下，居然成功了。到这里说明并不是定位不到元素，仔细想想可能是在ajax还没有执行完毕（<code>ajax是异步</code>）就已经执行了该<code>标签赋值</code>方法。因为ajax是异步的，会另起一个线程去执行接下来的代码。<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224235045884.png" alt="image-20201224235045884"><br>分析好原因后，所以我们要解决的就是想办法让操作同步，所以我们可以在ajax拿到数据渲染后我们再进行赋值初始化操作<br><img src="/2020/12/24/jquery%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%A4%B1%E6%95%88%E7%9A%84%E5%8E%9F%E5%9B%A0/image-20201224235715203.png" alt="image-20201224235045884"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>selenuim的安装和配置</title>
    <url>/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="使用Selenuim自动化"><a href="#使用Selenuim自动化" class="headerlink" title="使用Selenuim自动化"></a>使用Selenuim自动化</h2><p>工作中需要用到网页爬虫，决定总结一下自己学网页爬虫的一些感悟。</p>
<a id="more"></a>
<p>（1）第一步，我们需要查看浏览器版本，再下载对应的浏览器驱动</p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200901172911708.png" alt="image-20200901172911708"></p>
<p>浏览器驱动和浏览器版本对照表：<a href="https://www.cnblogs.com/xiaoyujuan/p/13580258.html">https://www.cnblogs.com/xiaoyujuan/p/13580258.html</a></p>
<p>驱动下载地址：<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></p>
<p>（2）第二步，配置环境变量</p>
<p>​        1.首先我们应该找到浏览器安装包所在位置，将ChromeDriver.exe复制其根目录下</p>
<p>​            <img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904175241549.png" alt="image-20200904175241549"><br>         如果您找不到你的chrome安装路径，您可以在浏览器处输入<code>chrome://version/</code>即可查看文件路径</p>
<p>​        2.再将当前路径配置导环境变量Path中，打开cmd输入chromedriver检验是否安装成功</p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904175917351.png" alt="image-20200904175917351"></p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904180008917.png" alt="image-20200904180008917">        </p>
<p>​        3.最后将ChromeDriver.exe复制Python解释器的安装路径下</p>
<p><img src="/2020/12/14/selenuim%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/image-20200904175509882.png" alt="image-20200904175509882"></p>
<p>（3）安装selenuim库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install Selenium</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>selenuim</tag>
      </tags>
  </entry>
  <entry>
    <title>xxl-job整合钉钉机器人实现服务监控</title>
    <url>/2020/12/14/xxl-job%E6%95%B4%E5%90%88%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h1 id="XXL-JOB整合钉钉机器人"><a href="#XXL-JOB整合钉钉机器人" class="headerlink" title="XXL-JOB整合钉钉机器人"></a>XXL-JOB整合钉钉机器人</h1><p>XXLJOB默认支持的报警是邮件，我们关注邮件并不是特别及时，所以本人想将钉钉机器人集成XXL-JOB；</p>
<a id="more"></a>
<p>话不多说整，让我们开始吧！！！</p>
<p>首先我们在钉钉上创建一个三人以上的群， 随后自定义一个机器人</p>
<h3 id="1-创建机器人"><a href="#1-创建机器人" class="headerlink" title="1.创建机器人"></a>1.创建机器人</h3><p><img src="/2020/12/14/xxl-job%E6%95%B4%E5%90%88%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/image-20201112174723190.png" alt="image-20201112174723190"></p>
<p>这边我们可以定义多个关键字，以满足不同内容的任务告警。</p>
<h3 id="2-XXL-Job集成钉钉机器人"><a href="#2-XXL-Job集成钉钉机器人" class="headerlink" title="2.XXL-Job集成钉钉机器人"></a>2.XXL-Job集成钉钉机器人</h3><ul>
<li>加入pom依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--钉钉机器人通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alibaba-dingtalk-service-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在application.propertis文件中增加常量</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 也就是我们的webhook地址</span></span><br><span class="line"><span class="meta">alarm.ding.accessToken</span> = <span class="string">9e962fca4cc894da988c06940079a20b8c3f50d227f90ce8b6afc7fa4d8de348</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新增DingJobAlarm</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 钉钉通知</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:Peng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2020/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DingJobAlarm</span> <span class="keyword">implements</span> <span class="title">JobAlarm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;alarm.ding.accessToken&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessToken;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringBuilder dingUrl = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;https://oapi.dingtalk.com/robot/send&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">doAlarm</span><span class="params">(XxlJobInfo info, XxlJobLog jobLog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> alarmResult = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;ding ---------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            contactHttpPostUrl();</span><br><span class="line">            HashMap&lt;String, Object&gt; map = contactHttpPostParam(info, jobLog);</span><br><span class="line">            restTemplate.postForEntity(dingUrl.toString(), map, Object.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            alarmResult = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> alarmResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> HashMap&lt;String, Object&gt; <span class="title">contactHttpPostParam</span><span class="params">(XxlJobInfo info, XxlJobLog jobLog)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&quot;msgtype&quot;</span>, <span class="string">&quot;text&quot;</span>);</span><br><span class="line">        HashMap&lt;String, String&gt; contentMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        String content = <span class="string">&quot;定时任务失败： &quot;</span> + <span class="string">&quot;任务名称：&quot;</span> + info.getJobDesc() +</span><br><span class="line">                <span class="string">&quot;,执行器名称：&quot;</span> + info.getExecutorHandler() +</span><br><span class="line">                <span class="comment">// 钉钉机器人通知内容</span></span><br><span class="line">                <span class="string">&quot;,执行时间：&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="keyword">new</span> Date()) +</span><br><span class="line">                <span class="string">&quot;,执行器ip：&quot;</span> + jobLog.getExecutorAddress();</span><br><span class="line">        contentMap.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">        map.put(<span class="string">&quot;text&quot;</span>, contentMap);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">contactHttpPostUrl</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeyException, UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间戳，签名计算后的签名</span></span><br><span class="line">        Long timestamp = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 密钥</span></span><br><span class="line">        String secret = <span class="string">&quot;SECd7e8d13a32a779e7b2e344d8c698bf8f209f3561c7bb05bfd8aabd5d0f63fb2a&quot;</span>;</span><br><span class="line">        String stringToSign = timestamp + <span class="string">&quot;\n&quot;</span> + secret;</span><br><span class="line">        Mac mac = Mac.getInstance(<span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        mac.init(<span class="keyword">new</span> SecretKeySpec(secret.getBytes(StandardCharsets.UTF_8), <span class="string">&quot;HmacSHA256&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] signData = mac.doFinal(stringToSign.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        String sign = URLEncoder.encode(<span class="keyword">new</span> String(Base64.encodeBase64(signData)),<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        dingUrl.append(<span class="string">&quot;?access_token=&quot;</span>).append(accessToken)</span><br><span class="line">                .append(<span class="string">&quot;&amp;sign=&quot;</span>).append(sign)</span><br><span class="line">                .append(<span class="string">&quot;&amp;timestamp=&quot;</span>).append(timestamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/14/xxl-job%E6%95%B4%E5%90%88%E9%92%89%E9%92%89%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E7%9B%91%E6%8E%A7/image-20201112180132037.png" alt="image-20201112180132037"></p>
<p>当然钉钉通知可以支持markdown，图片等等。想详细研究请查看<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq">官方文档</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>xxl-job</tag>
        <tag>钉钉机器人</tag>
      </tags>
  </entry>
  <entry>
    <title>与地球的第一次相遇</title>
    <url>/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/</url>
    <content><![CDATA[<p>地球是一只英短银渐层猫咪，是我女朋友和我在她同事那买的一只只有2个月大的小猫咪。<br>十一月，是我与她的第一次见面，由于还不熟悉，她对我们还是心有芥蒂。</p>
<a id="more"></a>
<p>偷看她!!!<br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/1.png" alt="偷拍1"><br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/2.png" alt="偷拍2"><br>与她的晚餐：<br><img src="/2020/11/24/%E4%B8%8E%E5%9C%B0%E7%90%83%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87/3.png" alt="晚饭"><br>我相信她会慢慢的向我们靠近的！</p>
]]></content>
      <categories>
        <category>地球</category>
        <category>猫咪</category>
      </categories>
      <tags>
        <tag>地球</tag>
        <tag>宠物</tag>
      </tags>
  </entry>
  <entry>
    <title>仨月的地球儿</title>
    <url>/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/</url>
    <content><![CDATA[<h1 id="可爱的球球仨月了"><a href="#可爱的球球仨月了" class="headerlink" title="可爱的球球仨月了"></a>可爱的球球仨月了</h1><p>球已经到家已经一个月了，现在已经特别粘人了。。。每次回到家开门，她就在门口瞪着大眼睛对着我，然后一直粘着你的脚跟。</p>
<a id="more"></a>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202113835.png" alt="image-20201213202113835"></p>
<p>似乎在看我敲电脑。。。不屑你</p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202144924.png" alt="image-20201213202144924"></p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202201822.png" alt="image-20201213202201822"></p>
<p>长大了很多啊</p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202222905.png" alt="image-20201213202222905"></p>
<p>一起看综艺…</p>
<p><img src="/2020/12/13/%E4%BB%A8%E6%9C%88%E7%9A%84%E5%9C%B0%E7%90%83%E5%84%BF/image-20201213202259570.png" alt="image-20201213202259570"></p>
]]></content>
      <categories>
        <category>地球</category>
        <category>猫咪</category>
      </categories>
      <tags>
        <tag>地球</tag>
        <tag>宠物</tag>
      </tags>
  </entry>
  <entry>
    <title>利用AOP配置事务</title>
    <url>/2021/04/27/%E5%88%A9%E7%94%A8AOP%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="利用AOP配置事务"><a href="#利用AOP配置事务" class="headerlink" title="利用AOP配置事务"></a>利用AOP配置事务</h1><p>由于最近面试被问到工作中有没有用到事务?，是如何使用的，事务又是如何回滚的？虽然我知道公司项目是通过XML配置，但是不知道具体的实现细节。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事物管理器，在*ServiceImpl里写@Transactional就可以启用事物管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate5.HibernateTransactionManager&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用注解来使用事务 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过AOP配置提供事务增强，让service包下所有Bean的所有方法拥有事务 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aop:config proxy-target-class true:false true则使用jdk proxy，反之则使用cglib</span></span><br><span class="line"><span class="comment">      jdk是基于接口的代理，代理类必须实现接口；</span></span><br><span class="line"><span class="comment">      cglib是基于类，原理是对于每个被代理类动态生成其子类，子类覆盖父类方法实现增强；由于是继承       关系，所以被代理类是不能使用final修饰的</span></span><br><span class="line"><span class="comment">     这里由于被代理类是serviceimpl，都实现了接口，所以这里true/false并没太大关系</span></span><br><span class="line"><span class="comment">     aop:pointcut:切面，作用于哪些方法</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;serviceMethod&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">expression</span>=<span class="string">&quot;(execution(* com.adinall.buss.**.service..*.*(..))) or (execution(* com.adinall.core.common.service..*.*(..)))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;serviceMethod&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;record*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;modify*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;execute*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;reset*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;batch*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;add*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span>/&gt;</span></span><br><span class="line">        ····</span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>仔细想想也是，通过aop实现对所有service做事务织入就不用为每个service添加事务了</p>
<p><a href="https://www.cnblogs.com/shamo89/p/9925390.html">如何使用XML配置事务</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>aop</tag>
      </tags>
  </entry>
  <entry>
    <title>千万级数据表优化</title>
    <url>/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="千万级数据表优化"><a href="#千万级数据表优化" class="headerlink" title="千万级数据表优化"></a>千万级数据表优化</h1><p>最近因为工作量不大，向老大讨了一个活—优化SeverLog。公司项目的ServerLog查询功能太慢（数据量千万级别），这对一个毫无Sql实战经验的人来说有点难以着手，不知道从何处入手。</p>
<a id="more"></a>
<h3 id="1-找到执行Sql"><a href="#1-找到执行Sql" class="headerlink" title="1.找到执行Sql"></a>1.找到执行Sql</h3><p>sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line"> sld.offer_id <span class="keyword">AS</span> offerId,</span><br><span class="line"> sld.date <span class="keyword">AS</span> dateTime,</span><br><span class="line"> oe.NAME <span class="keyword">AS</span> offerName,</span><br><span class="line"> ad.id <span class="keyword">AS</span> advertiserId,</span><br><span class="line"> ad.company <span class="keyword">AS</span> advertiserName,</span><br><span class="line"> af.company <span class="keyword">AS</span> affiliateName,</span><br><span class="line"> sld.aff_id <span class="keyword">AS</span> affiliateId,</span><br><span class="line"> sld.origin_source_id <span class="keyword">AS</span> originSourceId,</span><br><span class="line"> sld.new_source_id <span class="keyword">AS</span> newSourceId,</span><br><span class="line"> sld.action,</span><br><span class="line"> co.option_name <span class="keyword">AS</span> actionName,</span><br><span class="line"> sld.CODE,</span><br><span class="line"> con.option_name <span class="keyword">AS</span> codeName,</span><br><span class="line"> <span class="keyword">SUM</span>( sld.quantity ) <span class="keyword">AS</span> quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line"> server_log_daily sld</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option co <span class="keyword">ON</span> co.option_value = sld.action </span><br><span class="line"> <span class="keyword">AND</span> co.group_id = <span class="number">38</span></span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option con <span class="keyword">ON</span> con.option_value = sld.CODE </span><br><span class="line"> <span class="keyword">AND</span> con.group_id = <span class="number">39</span></span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> offer oe <span class="keyword">ON</span> oe.id = sld.offer_id</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> advertiser ad <span class="keyword">ON</span> ad.id = oe.advertiser_id</span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> affiliate af <span class="keyword">ON</span> af.id = sld.aff_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"> <span class="number">1</span> = <span class="number">1</span> </span><br><span class="line"> <span class="keyword">AND</span> sld.action = <span class="number">1</span></span><br><span class="line"> <span class="keyword">AND</span> sld.type = <span class="number">1</span>  </span><br><span class="line"> <span class="keyword">AND</span> sld.date &gt;= <span class="string">&#x27;2020-11-17&#x27;</span></span><br><span class="line"> <span class="keyword">AND</span> sld.date &lt;= <span class="string">&#x27;2020-11-19&#x27;</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"> sld.date,</span><br><span class="line"> advertiserId,</span><br><span class="line"> affiliateId,</span><br><span class="line"> originSourceId,</span><br><span class="line"> newSourceId,</span><br><span class="line"> <span class="keyword">action</span>,</span><br><span class="line"> actionName,</span><br><span class="line"> CODE,</span><br><span class="line"> codeName,</span><br><span class="line"> offerId,</span><br><span class="line"> dateTime,</span><br><span class="line"> offerName </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"> dateTime <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>查看sql执行时间：执行了14秒，显然是不尽人意的。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126183101310.png" alt="image-20201126183101310"></p>
<p>通过sql，我们可以发现关联了5张表，且由于group by字段太多。再来看看各个表数据量的情况。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126172936560.png" alt="image-20201126172936560"></p>
<p>server_log_daily表，还是很大的。</p>
<h3 id="2-这边使用explain查看一下sql的执行计划"><a href="#2-这边使用explain查看一下sql的执行计划" class="headerlink" title="2.这边使用explain查看一下sql的执行计划"></a>2.这边使用explain查看一下sql的执行计划</h3><p><strong><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126180111878.png" alt="image-20201126180111878"></strong></p>
<p>重点看type，row，filtered这三个字段，range证明是走了索引的，rows代表走索引的行数，filtered命中索引的百分比。这里可以看出sld也就是daily表，filtered命中索引太低了才1，也就是说99%都没有走索引。所以我们得优化。</p>
<p>2.优化</p>
<p>优化Sql首先想到的是建立索引，这里可以通过explain执行计划看到是走了索引的。所以我们需要想到其他的方式来优化。首先server_log_daily是一张大表，由于一次查询数据数据量太大，所以我们可以考虑分页，先查找到daily表中进分页再连接表，这样只查询daily表中的25条记录，这样type即使是all由于数据量不多，执行起来也是很快的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">	tmp.offerId,</span><br><span class="line">	tmp.dateTime,</span><br><span class="line">	oe.NAME <span class="keyword">AS</span> offerName,</span><br><span class="line">	tmp.affiliateId,</span><br><span class="line">	af.company <span class="keyword">AS</span> affiliateName,</span><br><span class="line">	ad.id <span class="keyword">AS</span> advertiserId,</span><br><span class="line">	ad.company <span class="keyword">AS</span> advertiserName,</span><br><span class="line">	tmp.originSourceId,</span><br><span class="line">	tmp.newSourceId,</span><br><span class="line">	co.option_name <span class="keyword">AS</span> actionName,</span><br><span class="line">	tmp.action,</span><br><span class="line">	tmp.CODE,</span><br><span class="line">	con.option_name <span class="keyword">AS</span> codeName,</span><br><span class="line">	tmp.quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	sld.offer_id <span class="keyword">AS</span> offerId,</span><br><span class="line">	sld.date <span class="keyword">AS</span> dateTime,</span><br><span class="line">	sld.aff_id <span class="keyword">AS</span> affiliateId,</span><br><span class="line">	sld.origin_source_id <span class="keyword">AS</span> originSourceId,</span><br><span class="line">	sld.new_source_id <span class="keyword">AS</span> newSourceId,</span><br><span class="line">	sld.action,</span><br><span class="line">	sld.CODE,</span><br><span class="line">	<span class="keyword">SUM</span>( sld.quantity ) <span class="keyword">AS</span> quantity </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	server_log_daily sld </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	<span class="number">1</span> = <span class="number">1</span> </span><br><span class="line">	<span class="keyword">AND</span> sld.action = <span class="number">1</span></span><br><span class="line">	<span class="keyword">AND</span> sld.type = <span class="number">1</span> </span><br><span class="line">	<span class="keyword">AND</span> sld.date = <span class="string">&#x27;2020-11-19&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	sld.date,</span><br><span class="line">	sld.aff_id,</span><br><span class="line">	sld.origin_source_id,</span><br><span class="line">	sld.new_source_id,</span><br><span class="line">	sld.action,</span><br><span class="line">	sld.CODE,</span><br><span class="line">	sld.offer_id </span><br><span class="line">	<span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">25</span></span><br><span class="line">	) tmp</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> offer oe <span class="keyword">ON</span> oe.id = tmp.offerId</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> affiliate af <span class="keyword">ON</span> af.id = tmp.affiliateId</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> advertiser ad <span class="keyword">ON</span> ad.id = oe.advertiser_id</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option co <span class="keyword">ON</span> co.option_value = tmp.action </span><br><span class="line">	<span class="keyword">AND</span> co.group_id = <span class="number">38</span></span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> config_option con <span class="keyword">ON</span> con.option_value = tmp.CODE </span><br><span class="line">	<span class="keyword">AND</span> con.group_id = <span class="number">39</span></span><br></pre></td></tr></table></figure>

<p>优化后：sql只执行了1秒多，基本符合我们的心理预期。</p>
<p><img src="/2020/12/01/%E5%8D%83%E4%B8%87%E7%BA%A7%E6%95%B0%E6%8D%AE%E8%A1%A8%E4%BC%98%E5%8C%96/image-20201126183359630.png" alt="image-20201126183359630"></p>
<h3 id="3-优化sql"><a href="#3-优化sql" class="headerlink" title="3.优化sql"></a>3.优化sql</h3><p>1.使用索引</p>
<p>2.分区，分表（修改表结构会给业务带来很大的工作量，一般情况下不建议）</p>
<p>3.分页，提升性能</p>
<p>4.少用*,  count可以使用count(1)代替具体列</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2021/01/24/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>什么是反射？就是一个逆向调用的过程。在java中，我们通常通过一个已知类对象去调用其方法或属性，这是正向过程。那么对于一个未知类对象，我们如何去调用其属性和方法呢，这时我们就可以通过反射去获取对象的class，调用其方法去获取对象的属性或执行目标对象的方法。</p>
<a id="more"></a>
<p><code>测试Company类</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pf.springboot.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 公司实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2021/1/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String bossName;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal registerMoney;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Company</span><span class="params">(Integer id, String bossName, Integer size, Date createTime, BigDecimal registerMoney)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.bossName = bossName;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">        <span class="keyword">this</span>.registerMoney = registerMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 省略get,set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echoCompanyDetail</span><span class="params">(String bossName, Integer size, Date createTime, BigDecimal registerMoney)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(●&#x27;◡&#x27;●)ﾉ【pic】(●&#x27;◡&#x27;●)ﾉ【pic】(●&#x27;◡&#x27;●)ﾉ【pic】 \n 这哩呀》》》&quot;</span> +</span><br><span class="line">                <span class="string">&quot;公司老板名称: &quot;</span> + bossName + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;规模: &quot;</span> + size + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;创立时间: &quot;</span> + format.format(createTime) + <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;注册资金: &quot;</span> + registerMoney + <span class="string">&quot;\n￣□￣｜｜&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>测试类</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pf.springboot.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pf.springboot.entity.Company;</span><br><span class="line"><span class="keyword">import</span> com.pf.springboot.entity.ObjectDetail;</span><br><span class="line"><span class="keyword">import</span> com.pf.springboot.entity.People;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:Peng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2021/1/15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// java 反射 api</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Company company = <span class="keyword">new</span> Company(<span class="number">1</span>,<span class="string">&quot;黄小龙&quot;</span>, <span class="number">50</span>, <span class="keyword">new</span> Date(), BigDecimal.ONE);</span><br><span class="line">        List&lt;?&gt; list = getClassField(company);</span><br><span class="line">        <span class="comment">// 对象拥有的属性</span></span><br><span class="line">        <span class="comment">// System.out.println(list.toString());</span></span><br><span class="line">        <span class="comment">// 对象所有方法</span></span><br><span class="line">        <span class="comment">// echoAllMethods(people);</span></span><br><span class="line">        <span class="comment">// 反射执行指定方法</span></span><br><span class="line">        invokeMethod(company, <span class="string">&quot;echoCompanyDetail&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 利用反射获取所传的类属性列表（包括私有、共有等）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 任意对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;?&gt; 泛型对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;?&gt; getClassField(Object obj) &#123;</span><br><span class="line">        <span class="comment">// 获取</span></span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="comment">// 所有属性</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Arrays.stream(fields).forEach(field -&gt; &#123;</span><br><span class="line">            <span class="comment">// 设置是否允许访问</span></span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String fieldStr = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fieldStr = <span class="string">&quot;属性: &quot;</span> +</span><br><span class="line">                        field.getName() +</span><br><span class="line">                        <span class="string">&quot; = &quot;</span> +</span><br><span class="line">                        field.get(obj) +</span><br><span class="line">                        <span class="string">&quot;, 访问修饰符: &quot;</span> +</span><br><span class="line">                        Modifier.toString(field.getModifiers()) +</span><br><span class="line">                        <span class="string">&quot;, 参数类型: &quot;</span> +</span><br><span class="line">                        field.getType();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(fieldStr + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印所拿到反射类中的所有公有，私有，保护，默认方法；但不包括父类的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">echoAllMethods</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="comment">// 拿到反射类中所有的公有方法（包括父类）</span></span><br><span class="line">        <span class="comment">// Method[] methods = clazz.getMethods();</span></span><br><span class="line">        <span class="comment">//  拿到反射类中的所有公有，私有，保护，默认方法；但不包括父类的方法</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            String name = method.getName();</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过反射 invoke方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeMethod</span><span class="params">(Object obj, String methodName)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = clazz.getMethod(methodName, String.class, Integer.class, Date.class, BigDecimal.class);</span><br><span class="line">            String result = (String) method.invoke(obj, <span class="string">&quot;李天刚&quot;</span>, <span class="number">1</span>, <span class="keyword">new</span> Date(), BigDecimal.valueOf(<span class="number">3</span>));</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在当前类中没有找到找到指定方法: &quot;</span> + methodName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>效果展示</code></p>
<p><img src="/2021/01/24/%E5%8F%8D%E5%B0%84/image-20210124213011090.png" alt="image-20210124213011090"></p>
<p><code>属性-值列表</code>:</p>
<p><img src="/2021/01/24/%E5%8F%8D%E5%B0%84/image-20210124213103575.png" alt="image-20210124213103575"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>回顾2020</title>
    <url>/2021/01/15/%E5%9B%9E%E9%A1%BE2020/</url>
    <content><![CDATA[<p>2020已经过去， 但回想起来经历的事，遇见的人都在脑海中一一浮现。</p>
<a id="more"></a>
<p>2020说起来是艰难的一年，也是‘幸运’的一年，艰难的是年初疫情让我无法正常工作，人生的第一份实习工作也就因此结束了。辞退给我的信心大打折扣 <code>第一份工作被辞退的确很难受</code>，被辞退的我并没有选择再去深圳找工作，而是选择了等接下来3、4月的春招。</p>
<p>​    接下来的两个月里，忙着巩固<code>java</code>基础，其他时间用来陪陪爷爷奶奶。所以说2020对于我来说也是幸运的一年，即将宣告毕业的我可以好好利用学生旅途中最后一个来陪陪家人，如今的我已经23岁了，是该工作的年纪了意味着我没有时间陪家人了，所以我也很<code>感谢2020</code>。</p>
<p>​    话说回来，春招后我总共拿到的4家offer, 一家是南昌的，其他分别是广州，深圳，上海。<code>乡下的孩子还是很渴望去一线城市的</code>广州给的稍微低点<code>7.5K</code>并没有达到我期望薪资，<code>深圳</code>的<code>8k</code>但是需要大小周，最后我选择了<code>魔都</code>,一家相对于来说’比较好’的所谓8.5k的上海offer, 顺道感受一下魔都的魅力。</p>
<p>​    来到上海之后, 感觉和南昌并没有很大。。。来到我**网络技术公司所在的慧谷白猫科技园(可能听名字感觉很高大上，其实是一个很陈旧的科技园)。到了公司发现这其实是一个不到20平的小房子里，我的天呐，这种环境让我怎么受得了，这么小几十个人在一起也太压抑了。但是都说既来之则安之，既然来了还是踏踏实实的干吧，这毕竟是我的选择，来到属于我的工位上看见一张小的卡片写着“彭峰同学，入职愉快！！！”，对于一个外地人孤身一人来到上海这座大城市来说大概是最大的慰藉吧，环顾四周虽然房间不大但给人感觉是挺温暖的。</p>
<p>​    之后一个月里，过着忙碌的加班生活了每天都是10-11点到家，周末也是拿着电脑熟悉业务。直到6月7号吧结果被公司辞退了。对，你没有听错我还有10几天拿毕业证此前都是拿着每天200工资比之前实习还低，说转正8.5k的，快转正了就把我辞退了。现在想来当初入职体检还是我自己掏钱的这种公司不呆也罢，可是当时对于我来说</p>
<p>​    没有了工作收入，让我自己一个人在上海怎么过？我生命中最重要的人出现了，也就是我现在的女朋友，感谢她在我人生第一个低谷陪伴我、鼓励我！ 是她给了我信心与勇气。</p>
<p>​    被辞退后，在整个6月里就焦急地寻找着下一份工作，毕竟上海这消费还是很高的，不过好在是6,7月应届生职位还是不饱和的，我的运气还不算是太差。找工作还是很辛苦的，一天得面试2,3家，回到家身心俱疲。工作大概找了两个星期吧，boss, 前程无忧，51，智联，拉勾网简历都投的差不多<img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/boss.png" alt="boss">，大概投了1500份简历，可能沟通的却寥寥无几，更别提去面试的机会了。每天在家就是看看基础知识，这里十分感谢我前公司师傅，给我点明了方向，虽然没有一句显然的安慰，但是这远比那所谓的安慰有价值的多！眼见着身上之前在深圳实习存最后一点积蓄马上要被花完了，而面试都没有觉得整个人都颓废了，好在最后一星期找到了一份较为满意的工作，约了7月6号入职，到现在这一份工作已经稳定下来了，从这一份工作里学到了许多。</p>
<p>​    2020年10月，和我女朋友的第一次旅行，’南京’这一座12朝国都的城市在我心里留下了深刻的印象。东门这里有许多美味的小吃和各种小饰品，这里的小吃可以够我们吃一天的，实在太大了。</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201002_172351.jpg" alt="游南京">)</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201002_175805.jpg" alt="游南京">)</p>
<p>夫子庙忘记拍了，哈哈</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201004_195745.jpg" alt="游南京">)</p>
<p>1952街区这边的夜景很漂亮！</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201002_150231.jpg" alt="游南京">)</p>
<p><img src="/2021/01/15/%E5%9B%9E%E9%A1%BE2020/IMG_20201004_214714.jpg" alt="游南京">)</p>
<p>​    游了中山陵，中山陵特别大，我们并没有选择去美玲宫，实在太大了，感觉一天都在走路，晚上回酒店的路途中走的脚都疼，腿都感觉要断了。。。晚上就找了家药店买了瓶红花油回去擦了，貌似不怎么管用。余下的几天都是动都不想动了<strong>_</strong>。</p>
<p>假期完后，回到上海继续上班了。</p>
<p>​      到现在2021了。疫情又爆发了，这次过年是回不去了，不知道一个人在外地过年不知道是何一番景象。</p>
<p>感谢2020，感谢2020遇到的每一个人。</p>
]]></content>
      <categories>
        <category>日常生活</category>
      </categories>
      <tags>
        <tag>生活规划</tag>
      </tags>
  </entry>
  <entry>
    <title>在jenkins平台部署项目</title>
    <url>/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="1-远程服务器配置SSH服务，实现远程文件传输"><a href="#1-远程服务器配置SSH服务，实现远程文件传输" class="headerlink" title="1.远程服务器配置SSH服务，实现远程文件传输"></a>1.远程服务器配置SSH服务，实现远程文件传输</h3><p>1）安装<code>Publish Over SSH</code>插件</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228182701201.png" alt="image-20210228182701201"></p>
<p>2）开启22端口</p>
<p>3）配置SSH</p>
<p><code>在服务器上使用ssh-keygen生成一对密钥对，将私钥复制。</code></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228183323674.png" alt="image-20210228183323674"></p>
<p><code>系统配置》》配置 》》Publish over SSH</code></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228184933425.png" alt="image-20210228184933425"></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228185120357.png" alt="image-20210228185120357"></p>
<h3 id="2-配置邮件服务"><a href="#2-配置邮件服务" class="headerlink" title="2.配置邮件服务"></a>2.配置邮件服务</h3><p>1）下载插件<code>Email Extension Plugin</code></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228185317672.png" alt="image-20210228185317672"></p>
<ol start="2">
<li> <code>邮件配置</code></li>
</ol>
<p>进入Jenkins界面，系统配置》》Extended E-mail Notification</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228190230257.png" alt="image-20210228190230257"></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228190452491.png" alt="image-20210228190452491"></p>
<h3 id="3-凭据设置"><a href="#3-凭据设置" class="headerlink" title="3.凭据设置"></a>3.凭据设置</h3><p>jenkins需要拉取远程项目代码，本文采用<code>SSH方式</code>。</p>
<p>1）<code>在jenkins界面中，系统设置 》》Manage Credentials》》添加凭据</code></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228222033048.png" alt="image-20210228222033048"></p>
<ol start="2">
<li>复制<code>/root/.ssh/id_rsa/pub</code>内容<br><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228224043422.png" alt="image-20210228224043422"> 点击你的git账户setting设置，将内容粘贴到<code>Ssh andGPG Keys</code>中。</li>
</ol>
<h3 id="4-项目配置"><a href="#4-项目配置" class="headerlink" title="4.项目配置"></a>4.项目配置</h3><p>完成以上配置后，就可以添加一个任务了。</p>
<p>1）新建任务</p>
<p><code>左侧选项卡》》新建任务》》选择maven项目</code> 点击确定，任务新建完成。</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210228233535139.png" alt="image-20210228233535139"></p>
<ol start="2">
<li> 项目配置</li>
</ol>
<p>任务新建完成后，那jenkins如何知道你构建的项目呢？如何触发构建，构建完成后又需要做说明呢？接下来就是项目配置了。<br><code>1) 源码管理</code><br>jenkins从github中拉取代码配置<br><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301151600848.png" alt="image-20210301151600848"><br><code>2）触发器</code></p>
<p><code>jenkins触发构建的方式有许多种, 这里只介绍最常用的多工程构建, 定时构建和轮询SCM方式</code>。多工程构建触发可以设置指定工程构建完成后触发；后两种触发方式都需要配置<a href="https://www.beejson.com/tool/cron.html">Cron</a>。<br>定时字符串从左往右分别为： 分 时 日 月 周</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301140347622.png" alt="image-20210301140347622"></p>
<p><code>3) 构建环境</code></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301142213363.png" alt="image-20210301142213363"></p>
<p><code>4）构建后操作</code></p>
<p>（1）邮件发送构建结果</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301142400243.png" alt="image-20210301142400243"></p>
<p>邮件触发器：这里设置项目构建不管成功还是失败都发送构建结果</p>
<p><code>这里有一个坑！！！默认生成的Recipient List里面是Devoleper，我们需要选择默认配置的接收人</code></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301143300683.png" alt="image-20210301143300683"></p>
<p>（2）SSH服务设置</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301145443024.png" alt="image-20210301145443024"></p>
<p><code>执行命令</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;准备将springboot发版&quot; &gt;&gt;  codingboypeng.txt</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span>到你jar包所在目录</span></span><br><span class="line">cd /usr/local/java/work_space/</span><br><span class="line">mv classes/deploy.sh  deploy.sh</span><br><span class="line">rm -rf  classes</span><br><span class="line">chmod 777 deploy.sh</span><br><span class="line">sh deploy.sh &gt;&gt; log</span><br></pre></td></tr></table></figure>

<p><code>jar包部署脚本</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;stopping springboot application....&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找端口是否被占用</span></span><br><span class="line">pid=`ps -ef | grep springboot.jar | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">if [ &quot;$pid&quot; == &quot;&quot; ];</span><br><span class="line">    then</span><br><span class="line">        echo &quot;springboot is already stop!&quot;</span><br><span class="line">    else</span><br><span class="line">        echo &quot;kill -9 的pid:&quot; + $pid</span><br><span class="line">        kill -9 $pid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;remove old springboot.jar ...&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里如果你配置的ssh传输节点不在同一目录下，你需要将当然需要部署的旧版本jar替换成新jar...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于我配置的ssh传输目录在当前目录下，所以当前jar包就是新jar包，不需要进行删除替换。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rm /home/jenkins/HelloWorld/helloboot-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp /root/.jenkins/<span class="built_in">jobs</span>/HelloWorld/workspace/target/helloboot-0.0.1-SNAPSHOT.jar /home/jenkins/HelloWorld</span></span><br><span class="line">sleep 2s</span><br><span class="line">echo &quot;running springboot.jar....&quot;</span><br><span class="line">java -jar springboot.jar &amp;</span><br><span class="line">echo &quot;running springboot finish&quot;</span><br></pre></td></tr></table></figure>

<h3 id="5-项目构建"><a href="#5-项目构建" class="headerlink" title="5.项目构建"></a>5.项目构建</h3><p>1）项目构建十分简单，以上操作完成后，主页面会多出一个<code>springboot-test</code>任务，点击立即构建就可以了。</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301144318379.png" alt="image-20210301144318379">2）可以查看指定构建详情</p>
<p><code>某次构建》》控制台输出</code></p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301145209006.png" alt="image-20210301145209006"></p>
<p>3）查看是否部署成功</p>
<p><img src="/2021/02/09/%E5%9C%A8jenkins%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/image-20210301145538057.png" alt="image-20210301145538057"></p>
]]></content>
      <categories>
        <category>运维</category>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>maven部署</tag>
      </tags>
  </entry>
  <entry>
    <title>多个class名相同时，jquery定位指定class</title>
    <url>/2020/12/24/%E5%A4%9A%E4%B8%AAclass%E5%90%8D%E7%9B%B8%E5%90%8C%E6%97%B6%EF%BC%8Cjquery%E5%AE%9A%E4%BD%8D%E6%8C%87%E5%AE%9Aclass/</url>
    <content><![CDATA[<p>本人在开发一个新页面的时候，需要给经过动态渲染后的多个input框赋不同的值。</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> = <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackParam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> = <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackParam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> = <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;trackParam&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> ……</span><br></pre></td></tr></table></figure>
<p>这边有6个经过动态渲染生成的input框，且类名都为<code>trackKey</code>。现在需要给它们一一赋值，值列表取自后台，以下只演示示范代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var trackParam = &#123;&quot;sub1&quot;:&quot;qaq&quot;, &quot;sub2&quot;: &quot;wow&quot;, &quot;sub3&quot;: &quot;qwq&quot;&#125;</span><br><span class="line"></span><br><span class="line">var i = 0;</span><br><span class="line">for (var key in trackParam) &#123;</span><br><span class="line">    // 遍历给trackParam input赋值</span><br><span class="line">    $(&quot;.trackKey&quot;).eq(i).val(key);</span><br><span class="line">    $(&quot;.trackValue&quot;).eq(i).val(trackParam[key]);</span><br><span class="line">    i = i + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，如果你只是单纯想为某个下拉框赋值，我们可以这样写：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 第4个trackKey</span><br><span class="line">$(&#x27;.trackKey&#x27;).eq(4);</span><br><span class="line">// 倒数第二个trackKey</span><br><span class="line">$(&#x27;.trackKey&#x27;).eq(-2);</span><br><span class="line">// 最后一个trackKey</span><br><span class="line">$(&#x27;.trackKey&#x27;).last();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次Mongdb动态切换库查询</title>
    <url>/2020/12/01/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1Mongdb%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E5%BA%93%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="记录一次Mongdb动态切换库查询"><a href="#记录一次Mongdb动态切换库查询" class="headerlink" title="记录一次Mongdb动态切换库查询"></a>记录一次Mongdb动态切换库查询</h1><p>最近因为mongdb从单库改成随日期递增的多库，所以现在需要将原本单个数据源改为根据每天日期动态读库。</p>
<p>原版本是采用MongodbTemplate读取properties配置文件中mongo相关配置，网上找了不下20篇博文，却没有一篇有清晰解释的。</p>
<a id="more"></a>
<p>业务：ip超过三次发送邮件</p>
<p>mongo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原聚合查询是这样的 </span></span><br><span class="line">Aggregation aggregation = Aggregation.newAggregation(</span><br><span class="line"><span class="comment">// where匹配查询条件：affid, offerid,sourceid。</span></span><br><span class="line">Aggregation.match(</span><br><span class="line">    Criteria.where(<span class="string">&quot;aff_id&quot;</span>).is(affId.toString())</span><br><span class="line">            .and(<span class="string">&quot;offer_id&quot;</span>).is(offerId.toString())</span><br><span class="line">            .and(<span class="string">&quot;source_id&quot;</span>).is(originSourceId)),</span><br><span class="line"><span class="comment">// 通过ip进行分组，查询超过3条记录的ip</span></span><br><span class="line">Aggregation.group(<span class="string">&quot;ip&quot;</span>).count().as(<span class="string">&quot;ipCount&quot;</span>), Aggregation.match(Criteria.where(<span class="string">&quot;ipCount&quot;</span>).gt(<span class="number">3</span>)));</span><br><span class="line">AggregationResults&lt;Map&gt; ans = mongoTemplate.aggregate(aggregation, collectionName, Map.class);</span><br></pre></td></tr></table></figure>

<p>使用原生API：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 连接mongo</span></span><br><span class="line">MongoClient mongoClient = MongoClients.create(<span class="string">&quot;mongodb://localhost:27017&quot;</span>);</span><br><span class="line">String dateBaseName = prefix_database + DateUtils.formatDate(DateUtils.yyyyMMdd);</span><br><span class="line"><span class="comment">// 获取集合</span></span><br><span class="line">MongoCollection&lt;Document&gt; doc = database.getCollection(collectionName);</span><br><span class="line"><span class="comment">// match mongo筛选条件,匹配对应source_id, aff_id, offer_id的记录</span></span><br><span class="line">Document subMatch = <span class="keyword">new</span> Document();</span><br><span class="line">subMatch.put(<span class="string">&quot;offer_id&quot;</span>, offerId.toString());</span><br><span class="line">subMatch.put(<span class="string">&quot;aff_id&quot;</span>, affId.toString());</span><br><span class="line">subMatch.put(<span class="string">&quot;source_id&quot;</span>, originSourceId);</span><br><span class="line"></span><br><span class="line"><span class="comment">// group 根据ip进行分组</span></span><br><span class="line">Document subGroup = <span class="keyword">new</span> Document();</span><br><span class="line">subGroup.put(<span class="string">&quot;_id&quot;</span>, <span class="string">&quot;$ip&quot;</span>); </span><br><span class="line"><span class="comment">// 这里必须_id ：强制必须存在。可以为 null。</span></span><br><span class="line"><span class="comment">// 其余的计算字段是可选的，并使用&lt;accumulator&gt;运算符计算。具体的使用，通过下面的代码说明：</span></span><br><span class="line">subGroup.put(<span class="string">&quot;ipCount&quot;</span>, <span class="keyword">new</span> Document(<span class="string">&quot;$sum&quot;</span>, <span class="number">1</span>));</span><br><span class="line">Document match = <span class="keyword">new</span> Document(<span class="string">&quot;$match&quot;</span>, subMatch);</span><br><span class="line">Document group = <span class="keyword">new</span> Document(<span class="string">&quot;$group&quot;</span>, subGroup);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对分组后结果筛选超过3次的IP</span></span><br><span class="line">Document matchGroup = <span class="keyword">new</span> Document(<span class="string">&quot;$match&quot;</span>, <span class="keyword">new</span> Document(<span class="string">&quot;ipCount&quot;</span>,<span class="keyword">new</span> Document(<span class="string">&quot;$gt&quot;</span>, <span class="number">3</span>)));</span><br><span class="line">List&lt;Document&gt; aggregateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">aggregateList.add(match);</span><br><span class="line">aggregateList.add(group);</span><br><span class="line">aggregateList.add(matchGroup);</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line">AggregateIterable&lt;Document&gt; resultSet = doc.aggregate(aggregateList);</span><br><span class="line"><span class="comment">// 遍历结果</span></span><br><span class="line">Iterator&lt;Document&gt; iterator = resultSet.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">      Document map = iterator.next();</span><br><span class="line">      String ip = (String) map.get(<span class="string">&quot;_id&quot;</span>);</span><br><span class="line">      ips.add(ip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Console:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 打印结果</span><br><span class="line">[107.150.126.148]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次搭建个人博客</title>
    <url>/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><strong>前言：</strong></p>
<p>​    之前一直想搭建一个人博客，奈何一直没有时间；最近工作任务较轻松，决定搭建个人博客来记录生活点点滴滴和工作难题。</p>
<p>​    搭建个人博客方式有很多种，这里我是用<a href="https://hexo.io/zh-cn/docs">Hexo</a>+ Github来搭建博客的。</p>
<a id="more"></a>
<p><strong><em>主要流程：</em></strong></p>
<ol>
<li>搭建Node.js环境</li>
<li>搭建git环境</li>
<li>Github的注册和配置</li>
<li>安装配置Hexo</li>
<li>关联Hexo和GihubPages</li>
<li>GitHub Pages 地址解析到个人域名</li>
<li>Hexo 的常用操作</li>
</ol>
<h3 id="搭建Node-js环境"><a href="#搭建Node-js环境" class="headerlink" title="搭建Node.js环境"></a>搭建Node.js环境</h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。</p>
<p>在Node官网下载<a href="https://nodejs.org/en/">https://nodejs.org/en/</a>，安装。</p>
<h3 id="搭建git环境"><a href="#搭建git环境" class="headerlink" title="搭建git环境"></a>搭建git环境</h3><p>git是一款优秀的版本库管理工具，在 Git 官网：<a href="https://link.jianshu.com/?t=https://git-scm.com/">https://git-scm.com/</a> 下载安装。</p>
<h4 id="GitHub-注册和配置"><a href="#GitHub-注册和配置" class="headerlink" title="GitHub 注册和配置"></a>GitHub 注册和配置</h4><p>GitHub 是一个代码托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 GitHub，这里主要是通过Git将Hexo与Github相关联，通过Github自带的域名进行访问。</p>
<p>Github注册：<a href="https://link.jianshu.com/?t=https://github.com/">https://github.com/</a></p>
<p>1.新建一个private仓库</p>
<p>新建一个名为<code>你的用户名.github.io</code>，<em>注意：这里仓库名必须为该格式，否则无法正常访问</em>；</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118183453157.png" alt="image-20201118183453157"></p>
<p>2.设置域名访问：打开仓库设置找到<code>Github Pages</code></p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118183748517.png" alt="image-20201118183748517"></p>
<p>访问<a href="https://codingboypeng.github.io/">https://codingboypeng.github.io/</a>，如出现<code>codingboypeng.github.io/</code>证明配置成功。(注意这里需要换成你的域名地址)</p>
<h3 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h3><p><strong>使用 npm 安装 Hexo</strong>：在命令行中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>

<p>我们可以使用<code>hexo version</code>查看hexo版本，如出现如下图所示，则证明Hexo安装成功。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118185144748.png" alt="image-20201118185144748"></p>
<p>当然如果不了解hexo常用命令我们可以输入<code>hexo</code>将会提示，如下图：</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118184918362.png" alt="image-20201118184918362"></p>
<p>当安装完成后我们使用<a href="https://vscode.en.softonic.com/">VS Code</a>打开该项目，hexo目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .deploy         #需要部署的文件</span><br><span class="line">├── node_modules    #Hexo插件</span><br><span class="line">├── public          #生成的静态网页文件</span><br><span class="line">├── scaffolds       #模板</span><br><span class="line">├── source          #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里</span><br><span class="line">| ├── _drafts       #草稿</span><br><span class="line">| └── _posts        #文章</span><br><span class="line">├── themes          #主题</span><br><span class="line">├── _config.yml     #全局配置文件</span><br><span class="line">└── package.json    #npm 依赖等</span><br></pre></td></tr></table></figure>

<p>使用<code>hexo server</code>运行本地项目，访问<a href="https://localhost:4000/">https://localhost:4000</a>，出现如下界面说明运行成功。当然这只是本地运行，别人是看不见的，所以接下来需要将<code>hexo</code>部署到github。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201118190049202.png" alt="image-20201118190049202"></p>
<h3 id="关联Hexo和GihubPages"><a href="#关联Hexo和GihubPages" class="headerlink" title="关联Hexo和GihubPages"></a>关联Hexo和GihubPages</h3><p>通过git生成一个ssh key，将ssh key加入到对应项目中以此建立关联。（如果你已存在ssh key，可以在C:\Users\用户名\.ssh\id_rsa.pub中）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>在github新建的youname.github.io添加一个ssh key，将生成的ssh key保存到该仓库中；点开用户<code>settings</code>找到<code>SSH and GPG keys</code>将复制过来的ssh key粘贴到文本框中。</p>
<p><img src="/2020/11/18/%E8%AE%B0%E5%BD%95%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20201120173436729.png" alt="image-20201120173436729"></p>
<p>配置git邮箱密码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;1206226332@qq.com&quot;</span></span><br><span class="line">git config --global user.password <span class="string">&quot;password&quot;</span></span><br></pre></td></tr></table></figure>

<p>修改Hexo的<code>_config.yml</code>的<code>deploy</code>节点，替换成你的仓库地址</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:CodingBoyPeng/codingboypeng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>本地文件提交到git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除旧的 public 文件</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成新的 public 文件</span><br><span class="line">hexo generate</span><br><span class="line">或者</span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 开始部署</span><br><span class="line">hexo deploye</span><br><span class="line">或者</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>这时可以通过访问<a href="https://codingboypeng.github.io/">https://codingboypeng.github.io</a>，可以看到你的个人博客啦</p>
<p>最后，感谢博主<a href="https://www.jianshu.com/p/39562a0d8eb6">BXM</a>，也就是我的实习同事；哈哈哈， 世界真的很小！！！</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus自动生成及其原理</title>
    <url>/2021/03/08/MybatisPlus%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="MybatisPlus自动生成及其原理"><a href="#MybatisPlus自动生成及其原理" class="headerlink" title="MybatisPlus自动生成及其原理"></a>MybatisPlus自动生成及其原理</h1><p>在学习<code>MybatisPlus</code>的时候，觉得编写<code>Entity</code>,<code>Mapper</code>,<code>Service</code>和<code>Controller</code>类这种最基本而又重复性较高的步骤是十分没有必要的。我们可以使用Mybatis的逆向工程插件来快速搭建基本脚手架。</p>
<a id="more"></a>
<h3 id="1-模板引擎"><a href="#1-模板引擎" class="headerlink" title="1.模板引擎"></a>1.模板引擎</h3><p>我们可以通过<code>Template</code>引擎来大大减少编写的代码，常见的模板框架有<code>Freemarker</code>，<code>Theamleaf</code>,  <code>Velocity</code>等。。。本文使用<code>Velocity</code>作为模板引擎。</p>
<p>导入Velocity相关依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.velocity&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;velocity-engine-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-自定义模板内容"><a href="#2-自定义模板内容" class="headerlink" title="2.自定义模板内容"></a>2.自定义模板内容</h3><p>导入<code>Velocity</code>相关依赖包后，我们就可以创建.vm模板文件来自定义模板内容了, 以下模板内容可以根据自身业务需要自行配置。</p>
<p>(1) entity.vm</p>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package $&#123;package.Entity&#125;;</span><br><span class="line"></span><br><span class="line">#foreach($pkg in $&#123;table.importPackages&#125;)</span><br><span class="line">import $&#123;pkg&#125;;</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#if($&#123;entityLombokModel&#125;)</span><br><span class="line">import lombok.Data;</span><br><span class="line">import lombok.EqualsAndHashCode;</span><br><span class="line">    #if($&#123;chainModel&#125;)</span><br><span class="line">    import lombok.experimental.Accessors;</span><br><span class="line">    #end</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * $!&#123;table.comment&#125;</span><br><span class="line"> * &lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author $&#123;author&#125;</span><br><span class="line"> * @since $&#123;date&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">#if($&#123;entityLombokModel&#125;)</span><br><span class="line">@Data</span><br><span class="line">    #if($&#123;superEntityClass&#125;)</span><br><span class="line">    @EqualsAndHashCode(callSuper &#x3D; true)</span><br><span class="line">    #else</span><br><span class="line">    @EqualsAndHashCode(callSuper &#x3D; false)</span><br><span class="line">    #end</span><br><span class="line">    #if($&#123;chainModel&#125;)</span><br><span class="line">    @Accessors(chain &#x3D; true)</span><br><span class="line">    #end</span><br><span class="line">#end</span><br><span class="line">#if($&#123;table.convert&#125;)</span><br><span class="line">@TableName(&quot;$&#123;table.name&#125;&quot;)</span><br><span class="line">#end</span><br><span class="line">#if($&#123;swagger2&#125;)</span><br><span class="line">@ApiModel(value&#x3D;&quot;$&#123;entity&#125;对象&quot;, description&#x3D;&quot;$!&#123;table.comment&#125;&quot;)</span><br><span class="line">#end</span><br><span class="line">#if($&#123;superEntityClass&#125;)</span><br><span class="line">public class $&#123;entity&#125; extends $&#123;superEntityClass&#125;#if($&#123;activeRecord&#125;)&lt;$&#123;entity&#125;&gt;#end &#123;</span><br><span class="line">#elseif($&#123;activeRecord&#125;)</span><br><span class="line">public class $&#123;entity&#125; extends Model&lt;$&#123;entity&#125;&gt; &#123;</span><br><span class="line">#else</span><br><span class="line">public class $&#123;entity&#125; implements Serializable &#123;</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#if($&#123;entitySerialVersionUID&#125;)</span><br><span class="line">    private static final long serialVersionUID&#x3D;1L;</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">## ----------  BEGIN 字段循环遍历  ----------</span><br><span class="line">#foreach($field in $&#123;table.fields&#125;)</span><br><span class="line">#if($&#123;field.keyFlag&#125;)</span><br><span class="line">    #set($keyPropertyName&#x3D;$&#123;field.propertyName&#125;)</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">#if(&quot;$!field.comment&quot; !&#x3D; &quot;&quot;)</span><br><span class="line">    #if($&#123;swagger2&#125;)</span><br><span class="line">    @ApiModelProperty(value &#x3D; &quot;$&#123;field.comment&#125;&quot;)</span><br><span class="line">    #else</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * $&#123;field.comment&#125;</span><br><span class="line">     *&#x2F;</span><br><span class="line">    #end</span><br><span class="line">#end</span><br><span class="line">#if($&#123;field.keyFlag&#125;)</span><br><span class="line">    ## 主键</span><br><span class="line">#if($&#123;field.keyIdentityFlag&#125;)</span><br><span class="line">@TableId(value &#x3D; &quot;$&#123;field.annotationColumnName&#125;&quot;, type &#x3D; IdType.AUTO)</span><br><span class="line">#elseif(!$null.isNull($&#123;idType&#125;) &amp;&amp; &quot;$!idType&quot; !&#x3D; &quot;&quot;)</span><br><span class="line">@TableId(value &#x3D; &quot;$&#123;field.annotationColumnName&#125;&quot;, type &#x3D; IdType.$&#123;idType&#125;)</span><br><span class="line">#elseif($&#123;field.convert&#125;)</span><br><span class="line">@TableId(&quot;$&#123;field.annotationColumnName&#125;&quot;)</span><br><span class="line">#end</span><br><span class="line">## 普通字段</span><br><span class="line">#elseif($&#123;field.fill&#125;)</span><br><span class="line">    ## -----   存在字段填充设置   -----</span><br><span class="line">    #if($&#123;field.convert&#125;)</span><br><span class="line">    @TableField(value &#x3D; &quot;$&#123;field.annotationColumnName&#125;&quot;, fill &#x3D; FieldFill.$&#123;field.fill&#125;)</span><br><span class="line">    #else</span><br><span class="line">    @TableField(fill &#x3D; FieldFill.$&#123;field.fill&#125;)</span><br><span class="line">    #end</span><br><span class="line">#elseif($&#123;field.convert&#125;)</span><br><span class="line">@TableField(&quot;$&#123;field.annotationColumnName&#125;&quot;)</span><br><span class="line">#end</span><br><span class="line">## 乐观锁注解</span><br><span class="line">#if($&#123;versionFieldName&#125;&#x3D;&#x3D;$&#123;field.name&#125;)</span><br><span class="line">@Version</span><br><span class="line">#end</span><br><span class="line">## 逻辑删除注解</span><br><span class="line">#if($&#123;logicDeleteFieldName&#125;&#x3D;&#x3D;$&#123;field.name&#125;)</span><br><span class="line">    @TableLogic</span><br><span class="line">    #end</span><br><span class="line">    private $&#123;field.propertyType&#125; $&#123;field.propertyName&#125;;</span><br><span class="line">    #end</span><br><span class="line">    ## ----------  END 字段循环遍历  ----------</span><br><span class="line"></span><br><span class="line">    #if(!$&#123;entityLombokModel&#125;)</span><br><span class="line">    #foreach($field in $&#123;table.fields&#125;)</span><br><span class="line">    #if($&#123;field.propertyType.equals(&quot;boolean&quot;)&#125;)</span><br><span class="line">    #set($getprefix&#x3D;&quot;is&quot;)</span><br><span class="line">    #else</span><br><span class="line">    #set($getprefix&#x3D;&quot;get&quot;)</span><br><span class="line">    #end</span><br><span class="line"></span><br><span class="line">    public $&#123;field.propertyType&#125; $&#123;getprefix&#125;$&#123;field.capitalName&#125;() &#123;</span><br><span class="line">        return $&#123;field.propertyName&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #if($&#123;chainModel&#125;)</span><br><span class="line">    public $&#123;entity&#125; set$&#123;field.capitalName&#125;($&#123;field.propertyType&#125; $&#123;field.propertyName&#125;) &#123;</span><br><span class="line">    #else</span><br><span class="line">    public void set$&#123;field.capitalName&#125;($&#123;field.propertyType&#125; $&#123;field.propertyName&#125;) &#123;</span><br><span class="line">    #end</span><br><span class="line">        this.$&#123;field.propertyName&#125; &#x3D; $&#123;field.propertyName&#125;;</span><br><span class="line">    #if($&#123;chainModel&#125;)</span><br><span class="line">    return this;</span><br><span class="line">    #end</span><br><span class="line">    &#125;</span><br><span class="line">    #end</span><br><span class="line">    ## --foreach end---</span><br><span class="line">    #end</span><br><span class="line">    ## --end of #if(!$&#123;entityLombokModel&#125;)--</span><br><span class="line"></span><br><span class="line">    #if($&#123;entityColumnConstant&#125;)</span><br><span class="line">        #foreach($field in $&#123;table.fields&#125;)</span><br><span class="line">            public static final String $&#123;field.name.toUpperCase()&#125; &#x3D; &quot;$&#123;field.name&#125;&quot;;</span><br><span class="line">        #end</span><br><span class="line">    #end</span><br><span class="line">    #if($&#123;activeRecord&#125;)</span><br><span class="line">    @Override</span><br><span class="line">    protected Serializable pkVal() &#123;</span><br><span class="line">        #if($&#123;keyPropertyName&#125;)</span><br><span class="line">                return this.$&#123;keyPropertyName&#125;;</span><br><span class="line">        #else</span><br><span class="line">                return null;</span><br><span class="line">        #end</span><br><span class="line">    &#125;</span><br><span class="line">    #end</span><br><span class="line">    #if(!$&#123;entityLombokModel&#125;)</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">            return &quot;$&#123;entity&#125;&#123;&quot; +</span><br><span class="line">                #foreach($field in $&#123;table.fields&#125;)</span><br><span class="line">                    #if($!&#123;foreach.index&#125;&#x3D;&#x3D;0)</span><br><span class="line">                            &quot;$&#123;field.propertyName&#125;&#x3D;&quot; + $&#123;field.propertyName&#125; +</span><br><span class="line">                    #else</span><br><span class="line">                            &quot;, $&#123;field.propertyName&#125;&#x3D;&quot; + $&#123;field.propertyName&#125; +</span><br><span class="line">                    #end</span><br><span class="line">                #end</span><br><span class="line">                    &quot;&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    #end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(2) mapper.java.vm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package $&#123;package.Mapper&#125;;</span><br><span class="line"></span><br><span class="line">import $&#123;package.Entity&#125;.$&#123;entity&#125;;</span><br><span class="line">import $&#123;superMapperClassPackage&#125;;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * $!&#123;table.comment&#125; Mapper 接口</span><br><span class="line"> * &lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author $&#123;author&#125;</span><br><span class="line"> * @since $&#123;date&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">#if($&#123;kotlin&#125;)</span><br><span class="line">interface $&#123;table.mapperName&#125; : $&#123;superMapperClass&#125;&lt;$&#123;entity&#125;&gt;</span><br><span class="line">#else</span><br><span class="line">public interface $&#123;table.mapperName&#125; extends $&#123;superMapperClass&#125;&lt;$&#123;entity&#125;&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>

<p>(3) mapper.xml.vm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace&#x3D;&quot;$&#123;package.Mapper&#125;.$&#123;table.mapperName&#125;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    #if($&#123;enableCache&#125;)</span><br><span class="line">        &lt;!-- 开启二级缓存 --&gt;</span><br><span class="line">        &lt;cache type&#x3D;&quot;org.mybatis.caches.ehcache.LoggingEhcache&quot;&#x2F;&gt;</span><br><span class="line">    #end</span><br><span class="line">    #if($&#123;baseResultMap&#125;)</span><br><span class="line">        &lt;!-- 通用查询映射结果 --&gt;</span><br><span class="line">        &lt;resultMap id&#x3D;&quot;BaseResultMap&quot; type&#x3D;&quot;$&#123;package.Entity&#125;.$&#123;entity&#125;&quot;&gt;</span><br><span class="line">            #foreach($field in $&#123;table.fields&#125;)</span><br><span class="line">                #if($&#123;field.keyFlag&#125;)##生成主键排在第一位</span><br><span class="line">                    &lt;id column&#x3D;&quot;$&#123;field.name&#125;&quot; property&#x3D;&quot;$&#123;field.propertyName&#125;&quot; &#x2F;&gt;</span><br><span class="line">                #end</span><br><span class="line">            #end</span><br><span class="line">            #foreach($field in $&#123;table.commonFields&#125;)##生成公共字段</span><br><span class="line">                &lt;result column&#x3D;&quot;$&#123;field.name&#125;&quot; property&#x3D;&quot;$&#123;field.propertyName&#125;&quot; &#x2F;&gt;</span><br><span class="line">            #end</span><br><span class="line">            #foreach($field in $&#123;table.fields&#125;)</span><br><span class="line">                #if(!$&#123;field.keyFlag&#125;)##生成普通字段</span><br><span class="line">                    &lt;result column&#x3D;&quot;$&#123;field.name&#125;&quot; property&#x3D;&quot;$&#123;field.propertyName&#125;&quot; &#x2F;&gt;</span><br><span class="line">                #end</span><br><span class="line">            #end</span><br><span class="line">        &lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">    #end</span><br><span class="line">    #if($&#123;baseColumnList&#125;)</span><br><span class="line">        &lt;!-- 通用查询结果列 --&gt;</span><br><span class="line">        &lt;sql id&#x3D;&quot;Base_Column_List&quot;&gt;</span><br><span class="line">                #foreach($field in $&#123;table.commonFields&#125;)</span><br><span class="line">                    $&#123;field.columnName&#125;,</span><br><span class="line">                #end</span><br><span class="line">                $&#123;table.fieldNames&#125;</span><br><span class="line">        &lt;&#x2F;sql&gt;</span><br><span class="line"></span><br><span class="line">    #end</span><br><span class="line">&lt;&#x2F;mapper&gt;</span><br></pre></td></tr></table></figure>

<p>(4) service.java.vm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package $&#123;package.Service&#125;;</span><br><span class="line"></span><br><span class="line">import $&#123;package.Entity&#125;.$&#123;entity&#125;;</span><br><span class="line">import $&#123;superServiceClassPackage&#125;;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * $!&#123;table.comment&#125; service接口层</span><br><span class="line"> * &lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author $&#123;author&#125;</span><br><span class="line"> * @since $&#123;date&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">#if($&#123;kotlin&#125;)</span><br><span class="line">interface $&#123;table.serviceName&#125; : $&#123;superServiceClass&#125;&lt;$&#123;entity&#125;&gt;</span><br><span class="line">#else</span><br><span class="line">public interface $&#123;table.serviceName&#125; extends $&#123;superServiceClass&#125;&lt;$&#123;entity&#125;&gt; &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">        * 根据Id删除</span><br><span class="line">        * @时间:$&#123;cfg.datetime&#125;</span><br><span class="line">        * @param id 主键Id</span><br><span class="line">        *&#x2F;</span><br><span class="line">        int deleteById(Integer id);</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">        * 根据主键id进行查找</span><br><span class="line">        * @时间:$&#123;cfg.datetime&#125;</span><br><span class="line">        * @param id 主键Id</span><br><span class="line">        *&#x2F;</span><br><span class="line">        $&#123;entity&#125; selectById(Integer id);</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * &lt;h4&gt;功能:【查询$&#123;entity&#125;信息】【创建人：$&#123;author&#125;】&lt;&#x2F;h4&gt;</span><br><span class="line">         *</span><br><span class="line">         * @时间:$&#123;cfg.datetime&#125;</span><br><span class="line">         * @备注:&lt;h4&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">         * @param ids</span><br><span class="line">         * @return $&#123;entity&#125;信息</span><br><span class="line">         *&#x2F;</span><br><span class="line">        List&lt;$&#123;entity&#125;&gt; batchSelect$&#123;entity&#125;ByIds(List&lt;String&gt; ids);</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * &lt;h4&gt;功能:【批量删除$&#123;entity&#125;信息】【创建人：$&#123;author&#125;】&lt;&#x2F;h4&gt;</span><br><span class="line">         *</span><br><span class="line">         * @时间:$&#123;cfg.datetime&#125;</span><br><span class="line">         * @备注:&lt;h4&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">         * @param ids id集合</span><br><span class="line">         * @return 结果</span><br><span class="line">         *&#x2F;</span><br><span class="line">        int batchDelete$&#123;entity&#125;ByIds(List&lt;String&gt; ids);</span><br><span class="line">&#125;</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>

<p>(5) serviceimpl.java.vm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package $&#123;package.ServiceImpl&#125;;</span><br><span class="line"></span><br><span class="line">import $&#123;package.Entity&#125;.$&#123;entity&#125;;</span><br><span class="line">import $&#123;package.Mapper&#125;.$&#123;table.mapperName&#125;;</span><br><span class="line">import $&#123;package.Service&#125;.$&#123;table.serviceName&#125;;</span><br><span class="line">import $&#123;superServiceImplClassPackage&#125;;</span><br><span class="line">import java.util.List;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * $!&#123;table.comment&#125; 服务实现类</span><br><span class="line"> * &lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author $&#123;author&#125;</span><br><span class="line"> * @since $&#123;date&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Service</span><br><span class="line">public class $&#123;table.serviceImplName&#125; extends $&#123;superServiceImplClass&#125;&lt;$&#123;table.mapperName&#125;, $&#123;entity&#125;&gt; implements $&#123;table.serviceName&#125; &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private $&#123;table.mapperName&#125; $&#123;table.mapperName.substring(0, 1).toLowerCase()&#125;$&#123;table.mapperName.substring(1)&#125;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public $&#123;entity&#125; selectById(Integer id) &#123;</span><br><span class="line">        return  $&#123;table.mapperName.substring(0, 1).toLowerCase()&#125;$&#123;table.mapperName.substring(1)&#125;.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public $&#123;entity&#125; deleteById(Integer id) &#123;</span><br><span class="line">        return  $&#123;table.mapperName.substring(0, 1).toLowerCase()&#125;$&#123;table.mapperName.substring(1)&#125;.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;$&#123;entity&#125;&gt; batchSelect$&#123;entity&#125;ByIds(List&lt;String&gt; $&#123;entity&#125;IdsStr) &#123;</span><br><span class="line">        return  $&#123;table.mapperName.substring(0, 1).toLowerCase()&#125;$&#123;table.mapperName.substring(1)&#125;.selectBatchIds($&#123;entity&#125;IdsStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * &lt;h4&gt;功能:【批量删除$&#123;entity&#125;信息】【创建人：$&#123;author&#125;】&lt;&#x2F;h4&gt;</span><br><span class="line">     *</span><br><span class="line">     * @时间:$&#123;date&#125;</span><br><span class="line">     * @备注:&lt;h4&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">     * @param $&#123;entity&#125;IdsStr 需要删除的数据ID</span><br><span class="line">     * @return 结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public int batchDelete$&#123;entity&#125;ByIds(List&lt;String&gt; $&#123;entity&#125;Ids) &#123;</span><br><span class="line">        return  $&#123;table.mapperName&#125;.deleteBatchIds($&#123;entity&#125;Ids);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(6) controller.java.vm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package $&#123;package.Controller&#125;;</span><br><span class="line"></span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import com.pf.springboot.util.AjaxResult;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import $&#123;package.Entity&#125;.$&#123;entity&#125;;</span><br><span class="line">import $&#123;package.Service&#125;.$&#123;table.serviceName&#125;;</span><br><span class="line">#if($&#123;restControllerStyle&#125;)</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">import org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">#else</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">#end</span><br><span class="line">#if($&#123;superControllerClassPackage&#125;)</span><br><span class="line">import $&#123;superControllerClassPackage&#125;;</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * $!&#123;table.comment&#125; Controller层</span><br><span class="line"> * &lt;&#x2F;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author $&#123;author&#125;</span><br><span class="line"> * @since $&#123;date&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">#if($&#123;restControllerStyle&#125;)</span><br><span class="line">@RestController</span><br><span class="line">#else</span><br><span class="line">@Controller</span><br><span class="line">#end</span><br><span class="line">@RequestMapping(&quot;#if($&#123;package.ModuleName&#125;)&#x2F;$&#123;package.ModuleName&#125;#end&#x2F;#if($&#123;controllerMappingHyphenStyle&#125;)$&#123;controllerMappingHyphen&#125;#else$&#123;table.entityPath&#125;#end&quot;)</span><br><span class="line">#if($&#123;kotlin&#125;)</span><br><span class="line">class $&#123;table.controllerName&#125;#if($&#123;superControllerClass&#125;) : $&#123;superControllerClass&#125;()#end</span><br><span class="line">#else</span><br><span class="line">#if($&#123;superControllerClass&#125;)</span><br><span class="line">public class $&#123;table.controllerName&#125; extends $&#123;superControllerClass&#125; &#123;</span><br><span class="line">#else</span><br><span class="line">public class $&#123;table.controllerName&#125; &#123;</span><br><span class="line">#end</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private $&#123;table.serviceName&#125;    $&#123;table.serviceName.substring(1, 2).toLowerCase()&#125;$&#123;table.serviceName.substring(2)&#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;**&lt;h4&gt;功能：【删除】【$&#123;$&#123;date&#125;&#125;】【创建人：$&#123;author&#125;】&lt;&#x2F;h4&gt;</span><br><span class="line">     * &lt;h4&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @DeleteMapping(value &#x3D; &quot;&#x2F;delete&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public AjaxResult delete$&#123;entity&#125;ById(@PathVariable Integer id)&#123;</span><br><span class="line">        $&#123;table.serviceName.substring(1, 2).toLowerCase()&#125;$&#123;table.serviceName.substring(2)&#125;.deleteById(id);</span><br><span class="line">        return AjaxResult.error(&quot;删除成功！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**&lt;h4&gt;功能：【批量删除】【$&#123;$&#123;date&#125;&#125;】【创建人：$&#123;author&#125;】&lt;&#x2F;h4&gt;</span><br><span class="line">     * &lt;h4&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @DeleteMapping(value &#x3D; &quot;&#x2F;batch&#x2F;delete&quot;)</span><br><span class="line">    public AjaxResult batchDelete$&#123;entity&#125;(@RequestParam(value &#x3D; &quot;ids&quot;) String ids)&#123;</span><br><span class="line">        if (StringUtils.isEmpty(ids)) &#123;</span><br><span class="line">            return AjaxResult.error(&quot;删除失败！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Integer num &#x3D; $&#123;table.serviceName.substring(1, 2).toLowerCase()&#125;$&#123;table.serviceName.substring(2)&#125;.batchDelete$&#123;entity&#125;ByIds(Arrays.asList(ids.split(&quot;,&quot;)));</span><br><span class="line">        return AjaxResult.success(&quot;删除成功！删除了&quot; + num + &quot;条&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**&lt;h4&gt;功能：【查找】【$&#123;cfg.datetime&#125;】【创建人：$&#123;author&#125;】&lt;&#x2F;h4&gt;</span><br><span class="line">     * &lt;h4&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @PostMapping(value &#x3D; &quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxResult get$&#123;entity&#125;(@PathVariable Integer id)&#123;</span><br><span class="line">        $&#123;entity&#125; $&#123;entity&#125; &#x3D; $&#123;table.serviceName.substring(1, 2).toLowerCase()&#125;$&#123;table.serviceName.substring(2)&#125;.selectById(id);</span><br><span class="line">        return AjaxResult.success($&#123;entity&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**&lt;h4&gt;功能：【批量】【$&#123;cfg.datetime&#125;】【创建人：$&#123;author&#125;】&lt;&#x2F;h4&gt;</span><br><span class="line">     * &lt;h4&gt;&lt;&#x2F;h4&gt;</span><br><span class="line">     *</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @PostMapping(value &#x3D; &quot;&#x2F;list&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public AjaxResult get$&#123;entity&#125;List(@RequestParam(value &#x3D; &quot;ids&quot;) String ids)&#123;</span><br><span class="line">        if (StringUtils.isEmpty(ids)) &#123;</span><br><span class="line">            return AjaxResult.error(&quot;请输入Id&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;$&#123;entity&#125;&gt; $&#123;entity&#125;Lists &#x3D; $&#123;table.serviceName.substring(1, 2).toLowerCase()&#125;$&#123;table.serviceName.substring(2)&#125;.batchSelect$&#123;entity&#125;ByIds(Arrays.asList(ids.split(&quot;,&quot;)));</span><br><span class="line">        return AjaxResult.success($&#123;entity&#125;Lists);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#end</span><br></pre></td></tr></table></figure>

<p>更多详细配置可以参考<a href="https://mybatis.plus/config/generator-config.html">官网生成器配置</a></p>
<p>不明白模板填充参数的我又来查看<a href="https://mybatis.plus/">官网</a>，结果看到自定义参数注入这里，只给出来这么一张截图。</p>
<p><img src="/2021/03/08/MybatisPlus%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/image-20210309143830119.png" alt="image-20210309143830119"></p>
<p>看到这截图你大概还是云里雾里，丝毫不知道自定义模板填充了哪些参数，更别谈去编写模板配置了。百度了不下30篇文章，都是你抄我我抄你，丝毫没有点自己理解见知。别着急，稍后解除你的疑惑。</p>
<h3 id="3-引入逆向工程"><a href="#3-引入逆向工程" class="headerlink" title="3.引入逆向工程"></a>3.引入逆向工程</h3><h4 id="3-1-导入逆向工程依赖"><a href="#3-1-导入逆向工程依赖" class="headerlink" title="3.1) 导入逆向工程依赖"></a>3.1) 导入逆向工程依赖</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-plus-generator&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.3.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-编写代码生成类"><a href="#3-2-编写代码生成类" class="headerlink" title="3.2) 编写代码生成类"></a>3.2) 编写代码生成类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pf.springboot.generator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.FileOutConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.TemplateConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:Peng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:2020/12/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取控制台内容</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        StringBuilder help = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        help.append(<span class="string">&quot;请输入&quot;</span>).append(tip).append(<span class="string">&quot;：&quot;</span>);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(ipt)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator generatorConfig = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取项目路径</span></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        <span class="comment">// 输出文件路径</span></span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;codingboypeng&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// gc.setSwagger2(true); 实体属性 Swagger2 注解</span></span><br><span class="line">        generatorConfig.setGlobalConfig(gc);</span><br><span class="line">        gc.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        gc.setServiceName(<span class="string">&quot;I%sService&quot;</span>);</span><br><span class="line">        gc.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        gc.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        gc.setDateType(DateType.TIME_PACK);</span><br><span class="line">        <span class="comment">// 设置通用查询映射结果</span></span><br><span class="line">        gc.setBaseResultMap(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/demo?generateSimpleParameterMetadata=true&amp;serverTimezone=UTC&amp;useSSL=false&quot;</span>);</span><br><span class="line">        <span class="comment">// dsc.setSchemaName(&quot;public&quot;);</span></span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;peng3112341&quot;</span>);</span><br><span class="line"></span><br><span class="line">        generatorConfig.setDataSource(dataSourceConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setModuleName(scanner(<span class="string">&quot;模块名&quot;</span>));</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;com.pf.springboot&quot;</span>);</span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">&quot;service.impl&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        generatorConfig.setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// to do nothing</span></span><br><span class="line">                <span class="comment">//.vm模板中，通过$&#123;cfg.abc&#125;获取属性</span></span><br><span class="line">                SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss:&quot;</span>);</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">&quot;datetime&quot;</span>, format.format(<span class="keyword">new</span> Date()));</span><br><span class="line">                <span class="keyword">this</span>.setMap(map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 如果模板引擎是 freemarker</span></span><br><span class="line"><span class="comment">//        String templatePath = &quot;/templates/mapper.xml.ftl&quot;;</span></span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">         String templatePath = <span class="string">&quot;/templates/mapper.xml.vm&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + packageConfig.getModuleName()</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        cfg.setFileCreate(new IFileCreate() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) &#123;</span></span><br><span class="line"><span class="comment">                // 判断自定义文件夹是否需要创建</span></span><br><span class="line"><span class="comment">                checkDir(&quot;调用默认方法创建的目录，自定义目录用&quot;);</span></span><br><span class="line"><span class="comment">                if (fileType == FileType.MAPPER) &#123;</span></span><br><span class="line"><span class="comment">                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false</span></span><br><span class="line"><span class="comment">                    return !new File(filePath).exists();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                // 允许生成模板文件</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        generatorConfig.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置自定义输出模板</span></span><br><span class="line">        <span class="comment">//指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别</span></span><br><span class="line">        templateConfig.setEntity(<span class="string">&quot;templates/entity.java.vm&quot;</span>);</span><br><span class="line">        templateConfig.setService(<span class="string">&quot;templates/service.java.vm&quot;</span>);</span><br><span class="line">        templateConfig.setServiceImpl(<span class="string">&quot;templates/serviceImpl.java.vm&quot;</span>);</span><br><span class="line">        templateConfig.setController(<span class="string">&quot;templates/controller.java.vm&quot;</span>);</span><br><span class="line">        templateConfig.setMapper(<span class="string">&quot;templates/mapper.java.vm&quot;</span>);</span><br><span class="line">        <span class="comment">// 防止二次生成Mapper.xml文件</span></span><br><span class="line">        templateConfig.setXml(<span class="keyword">null</span>);</span><br><span class="line">        generatorConfig.setTemplate(templateConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 是否为restful风格</span></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 公共父类</span></span><br><span class="line">        <span class="comment">// strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);</span></span><br><span class="line">        <span class="comment">// 写于父类中的公共字段</span></span><br><span class="line">        <span class="comment">// strategy.setSuperEntityColumns(&quot;id&quot;);</span></span><br><span class="line">        strategy.setInclude(scanner(<span class="string">&quot;表名，多个英文逗号分割&quot;</span>).split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setTablePrefix(packageConfig.getModuleName() + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        generatorConfig.setStrategy(strategy);</span><br><span class="line">        generatorConfig.setTemplateEngine(<span class="keyword">new</span> VelocityTemplateEngine());</span><br><span class="line">        generatorConfig.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-模板参数填充"><a href="#3-3-模板参数填充" class="headerlink" title="3.3) 模板参数填充"></a>3.3) 模板参数填充</h4><p>至于模板中的这些自定义参数是如何映射的，其实<a href="https://mybatis.plus/guide/generator.html#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">官网</a>就已经给出了答案。</p>
<p><img src="/2021/03/08/MybatisPlus%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/image-20210309135932507.png" alt="image-20210309135932507"></p>
<p>模板参数是通过调用<a href="https://github.com/baomidou/generator/blob/develop/mybatis-plus-generator/src/main/java/com/baomidou/mybatisplus/generator/engine/AbstractTemplateEngine.java">AbstractTemplateEngine</a>类中的<code>batchOutput</code>方法，大致分为三步。</p>
<p><img src="/2021/03/08/MybatisPlus%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/image-20210309141147795.png" alt="image-20210309141147795"></p>
<p>TableInfo类中的数据又是如何加载的呢，我们需要看到ConfigBuilder类中<code>handlerStrategy</code>方法</p>
<p><img src="/2021/03/08/MybatisPlus%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/image-20210309141601715.png" alt="image-20210309141601715"></p>
<p>这里看到<code>tableInfoList</code>是通过调用<code>getTablesInfo</code>方法，再来看看<code>getTablesInfo</code>方法里有哪些参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有的数据库表信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TableInfo&gt; <span class="title">getTablesInfo</span><span class="params">(StrategyConfig config)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">boolean</span> isInclude = (<span class="keyword">null</span> != config.getInclude() &amp;&amp; config.getInclude().length &gt; <span class="number">0</span>);</span><br><span class="line"> <span class="keyword">boolean</span> isExclude = (<span class="keyword">null</span> != config.getExclude() &amp;&amp; config.getExclude().length &gt; <span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span> (isInclude &amp;&amp; isExclude) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;&lt;strategy&gt; 标签中 &lt;include&gt; 与 &lt;exclude&gt; 只能配置一项！&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (config.getNotLikeTable() != <span class="keyword">null</span> &amp;&amp; config.getLikeTable() != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;&lt;strategy&gt; 标签中 &lt;likeTable&gt; 与 &lt;notLikeTable&gt; 只能配置一项！&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//所有的表信息</span></span><br><span class="line"> List&lt;TableInfo&gt; tableList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//需要反向生成或排除的表信息</span></span><br><span class="line"> List&lt;TableInfo&gt; includeTableList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> List&lt;TableInfo&gt; excludeTableList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"> <span class="comment">//不存在的表名</span></span><br><span class="line"> Set&lt;String&gt; notExistTables = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// 重点在这里！！！！ 这里就是查询当前schema中拥有的表</span></span><br><span class="line">   String tablesSql = dbQuery.tablesSql();</span><br><span class="line">     <span class="comment">/*  -----  后续主要是对排除表，不存在的表和包含的表进行过滤 ----- */</span></span><br><span class="line">   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>之前说到官网看到其他字段参数注入这里很突兀，<code>show full fields from xxx</code>压根就不知道怎么来的，也不知道有啥意义，那么在以下代码中就会告诉你答案！</p>
<p><img src="/2021/03/08/MybatisPlus%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/image-20210309143447907.png" alt="image-20210309143447907"></p>
<p>再来看看<code>convertTableFields</code>方法，究竟干了些什么？</p>
<p><img src="/2021/03/08/MybatisPlus%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%8F%8A%E5%85%B6%E5%8E%9F%E7%90%86/image-20210309144337092.png" alt="image-20210309144337092"></p>
]]></content>
      <categories>
        <category>Mybatis Plus</category>
      </categories>
      <tags>
        <tag>代码生成</tag>
      </tags>
  </entry>
</search>
